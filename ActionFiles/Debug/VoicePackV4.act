ACTIONFILE V4

ENABLED True

INSTALL LongDescription="This is the fourth edition of the voice pack for EDD, for version 8.1+\r\n***This will disable all previous voice packs***\r\n\r\nIt vocalises most events which are received, and welcomes you at the start and exit of the program. \nCertain events are not vocalised if they don't contain any information relevant to the user or if they only appear on start up.\r\n\r\nSpeech control and voice selection can be accomplished through the menu option in Add-Ons.\r\n\r\nThe ED Discovery team hope you enjoy this feature.\r\n\r\nMore voices can be purchased online.  Ivona voices which are commonly used since they are compatible with SAPI 5 interface can be purchased from www.textaloud.com individually.  Voices must be SAPI 5 compatible to be used with EDDiscovery.\r\nNPC background sounds (C) Frontier Developments"
INSTALL ShortDescription="Voice file for ED"
INSTALL Version=4.0.0.0
INSTALL MinEDVersion=8.1.0.0
INSTALL Location=Actions
INSTALL DisableOther1=VoicePackV1
INSTALL DisableOther2=VoicePackV2
INSTALL DisableOther3=VoicePackV3
INSTALL OtherFile1=npcmix.mp3;Sounds
INSTALL OtherFile2=npcprefix.mp3;Sounds
INSTALL OtherFile3=npcpostfix.mp3;Sounds

EVENT ApproachSettlement, GenericResponse, "", Condition AlwaysTrue
EVENT Bounty, GenericResponse, "", Condition AlwaysTrue
EVENT BuyAmmo, GenericResponse, "", Condition AlwaysTrue
EVENT BuyDrones, GenericResponse, "", Condition AlwaysTrue
EVENT BuyExplorationData, GenericResponse, "", Condition AlwaysTrue
EVENT BuyTradeData, GenericResponse, "", Condition AlwaysTrue
EVENT CapShipBond, GenericResponse, "", Condition AlwaysTrue
EVENT CockpitBreached, GenericResponse, Volume=100, Condition AlwaysTrue
EVENT CollectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT CommitCrime, CommitCrime, "", Condition AlwaysTrue
EVENT CommunityGoalDiscard, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalJoin, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalReward, GenericResponse, "", Condition AlwaysTrue
EVENT CrewAssign, GenericResponse, "", Condition AlwaysTrue
EVENT CrewFire, GenericResponse, "", Condition AlwaysTrue
EVENT CrewHire, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkScan, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT DataScanned, GenericResponse, "", Condition AlwaysTrue
EVENT Died, GenericResponse, "", Condition AlwaysTrue
EVENT Docked, GenericResponse, "", Condition AlwaysTrue
EVENT DockFighter, GenericResponse, "", Condition AlwaysTrue
EVENT DockingCancelled, GenericResponse, "", Condition AlwaysTrue
EVENT DockingDenied, GenericResponse, "", Condition AlwaysTrue
EVENT DockingGranted, GenericDelayedResponse, Delay=10000, Condition AlwaysTrue
EVENT DockingRequested, GenericResponse, "", Condition AlwaysTrue
EVENT DockingTimeout, GenericResponse, "", Condition AlwaysTrue
EVENT DockSRV, GenericResponse, "", Condition AlwaysTrue
EVENT EjectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerApply, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerCraft, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerProgress, GenericResponse, "", Condition AlwaysTrue
EVENT EscapeInterdiction, GenericResponse, "", Condition AlwaysTrue
EVENT FactionKillBond, GenericResponse, "", Condition AlwaysTrue
EVENT FSDJump, FSDResponse, "", Condition AlwaysTrue
EVENT FetchRemoteModule, GenericResponse, "", Condition AlwaysTrue
EVENT FuelScoop, GenericResponse, Priority=Low, Condition AlwaysTrue
EVENT Friends, Friends, "", Condition AlwaysTrue
EVENT HeatDamage, GenericResponse, "", Condition AlwaysTrue
EVENT HeatWarning, GenericResponse, "", Condition AlwaysTrue
EVENT HullDamage, HullDamage, "", Condition AlwaysTrue
EVENT Interdicted, GenericResponse, "", Condition AlwaysTrue
EVENT Interdiction, Interdiction, "", Condition AlwaysTrue
EVENT JetConeBoost, GenericResponse, "", Condition AlwaysTrue
EVENT JetConeDamage, GenericResponse, "", Condition AlwaysTrue
EVENT LaunchFighter, GenericResponse, "", Condition AlwaysTrue
EVENT LaunchSRV, GenericResponse, "", Condition AlwaysTrue
EVENT Liftoff, GenericResponse, "", Condition AlwaysTrue
EVENT MarketBuy, GenericResponse, "", Condition AlwaysTrue
EVENT MarketSell, MarketSell, "", Condition AlwaysTrue
EVENT MassModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialCollected, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscarded, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscovered, GenericResponse, "", Condition AlwaysTrue
EVENT MiningRefined, GenericResponse, "", Condition AlwaysTrue
EVENT MissionAbandoned, GenericResponse, "", Condition AlwaysTrue
EVENT MissionAccepted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionCompleted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionFailed, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleRetrieve, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSell, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSellRemote, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSwap, GenericResponse, "", Condition AlwaysTrue
EVENT onRefreshEnd, onRefreshEnd, "", Condition AlwaysTrue
EVENT onStartup, onStartup, "", Condition AlwaysTrue
EVENT PayFines, GenericResponse, "", Condition AlwaysTrue
EVENT PayLegacyFines, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayCollect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDefect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDeliver, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayFastTrack, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayJoin, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayLeave, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplaySalary, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVote, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT Promotion, GenericResponse, "", Condition AlwaysTrue
EVENT PVPKill, GenericResponse, "", Condition AlwaysTrue
EVENT RebootRepair, GenericResponse, "", Condition AlwaysTrue
EVENT ReceiveText, ReceiveText, "", Condition AlwaysTrue
EVENT RedeemVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelAll, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelPartial, GenericResponse, "", Condition AlwaysTrue
EVENT Repair, GenericResponse, "", Condition AlwaysTrue
EVENT RepairAll, GenericResponse, "", Condition AlwaysTrue
EVENT RestockVehicle, GenericResponse, "", Condition AlwaysTrue
EVENT Resurrect, GenericResponse, "", Condition AlwaysTrue
EVENT Scan, Scan, "", Condition AlwaysTrue
EVENT ScientificResearch, GenericResponse, "", Condition AlwaysTrue
EVENT Screenshot, GenericResponse, "", Condition AlwaysTrue
EVENT SelfDestruct, GenericResponse, "", Condition AlwaysTrue
EVENT SellDrones, GenericResponse, "", Condition AlwaysTrue
EVENT SellExplorationData, SellExplorationData, "", Condition AlwaysTrue
EVENT SendText, GenericResponse, "", Condition AlwaysTrue
EVENT ShieldState, ShieldState, "", Condition AlwaysTrue
EVENT ShipyardBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardNew, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSell, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSwap, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardTransfer, GenericResponse, "", Condition AlwaysTrue
EVENT SupercruiseEntry, GenericResponse, "", Condition AlwaysTrue
EVENT SupercruiseExit, GenericResponse, "", Condition AlwaysTrue
EVENT Synthesis, GenericResponse, "", Condition AlwaysTrue
EVENT Touchdown, GenericResponse, "", Condition AlwaysTrue
EVENT Undocked, GenericResponse, "", Condition AlwaysTrue
EVENT USSDrop, GenericResponse, "", Condition AlwaysTrue
EVENT VehicleSwitch, GenericResponse, "", Condition AlwaysTrue
EVENT WingAdd, GenericResponse, "", Condition AlwaysTrue
EVENT WingJoin, GenericResponse, "", Condition AlwaysTrue
EVENT WingLeave, GenericResponse, "", Condition AlwaysTrue
EVENT WingInvite, GenericResponse, "", Condition AlwaysTrue
EVENT onShutdown, onShutdown, "", Condition AlwaysTrue
EVENT onInstall, onInstall, "", Condition AlwaysTrue
EVENT onSayFinished, SaySystemInfo, "", EventName $== FSD
EVENT onTimer, SaySystemInfo, "", TimerName $== ScanDelay
EVENT onMenuItem, Menus, "", MenuName Contains VoiceMenu
EVENT onTimer, GenericResponse, "", TimerName Contains VoicePackGenericDelay
EVENT Scanned, GenericResponse, "", Condition AlwaysTrue
EVENT StartJump, GenericResponse, "", Condition AlwaysTrue
EVENT SetUserShipName, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberJoins, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberQuits, GenericResponse, "", Condition AlwaysTrue
EVENT JoinACrew, GenericResponse, "", Condition AlwaysTrue
EVENT KickCrewMember, GenericResponse, "", Condition AlwaysTrue
EVENT ChangeCrewRole, GenericResponse, "", Condition AlwaysTrue
EVENT QuitACrew, GenericResponse, "", Condition AlwaysTrue

//*************************************************************
// SetUpLanguageEnglish
//*************************************************************
PROGRAM SetUpLanguageEnglish

Static say_welcome $= "This is Elite Dangerous Discovery, Voice Pack 4"
Static say_install $= "You have installed Elite Dangerous Discovery, Voice Pack 4, English version"
Static say_shutdown $= "Bye Bye Commander, till next time;Elite Dangerous Discovery closing;Fly safe commander; Salutations Commander"
Static say_refresh $= "Welcome %existsdefault(RK_Class_Combat,\"\") Commander %(Commander), %ifcontains(LAST_ShipType,\"SRV\",\"driving\",\"flying\") a %(LAST_ShipType) with %(LED_Credits) credits"

Static say_ApproachSettlement $= "Approaching %(EventClass_Name);Settlement %(EventClass_Name) approaching"

Static say_Bounty $= "Bounty for that ship is %(EventClass_TotalReward) credits, faction was %rs(EventClass_VictimFaction,say_ss)"
Static say_BuyAmmo $= "Ammunition bought, %(EventClass_Cost) credits;That cost %(EventClass_Cost) credits"
Static say_BuyExplorationData $= "Bought map of star system %rs(EventClass_System,say_ss) for %(EventClass_Cost) credits"
Static say_BuyDrones $= "Bought %(EventClass_Count) %(EventClass_Type) at a total cost of %(EventClass_TotalCost) credits"
Static say_BuyTradeData $= "Bought trade data for system %rs(EventClass_System,say_ss), cost %(EventClass_Cost) credits"

Static say_CapShipBond $= "Reward for capital ship combat from faction %rs(EventClass_AwardingFaction,say_ss) against %rs(EventClass_VictimFaction,say_ss), %(EventClass_Reward) credits"
Static say_CockpitBreached $= "Alert, Alert, Cockpit breached. Head for station now;Emergency, loss of Cockpit Canopy, abort;Emergency, Cockpit Canopy is breached"
Static say_CollectCargo $= "{Picked up;Collected;Scooped up} %(EventClass_FriendlyType) %iftrue(EventClass_Stolen,\", Warning commander, this cargo is stolen\")"
Static say_CommitCrimeFine $= "Fine committed commander, %sc(EventClass_CrimeType) on %rs(EventClass_Faction,say_ss), cost %(EventClass_Fine) credits"
Static say_CommitCrimeBounty $= "Crime committed commander, %sc(EventClass_CrimeType) on %rs(EventClass_Faction,say_ss), bounty on you is %(EventClass_Bounty) credits"
Static say_CommunityGoalJoin $= "Joining the community goal %sc(EventClass_Name), located at system %rs(EventClass_System,say_ss)"
Static say_CommunityGoalReward $= "Community goal %sc(EventClass_Name), located at system %rs(EventClass_System,say_ss), rewarded you with %(EventClass_Reward) credits"
Static say_CommunityGoalDiscard $= "Opting out of community goal %sc(EventClass_Name), located at system %rs(EventClass_System,say_ss)"
Static say_CrewAssign $= "Crew member %(EventClass_Name), %ifequal(EventClass_Role,\"Active\",\" reporting for duty\",\" placed on %(EventClass_Role)\")"
Static say_CrewFire $= "{Crew member %(EventClass_Name) }fired;dismissed;is paid off, goodbye sucker"
Static say_CrewHire $= "{Hired new crew member %(EventClass_Name)%ifnotempty(EventClass_Faction,\", of faction %rs(EventClass_Faction,say_ss)\"), rank %(EventClass_CombatRank), costing %(EventClass_Cost) credits.} Welcome to the team; Welcome onboard"

Static say_ChangeCrewRole $= "Crew role changed to %(EventClass_Role);Swapped control to %(EventClass_Role)"
Static say_CrewMemberJoins $= "Crew member %(EventClass_Crew) joins us on the %(EventShip_ShortName), Welcome Commander;Welcome Commander %(EventClass_Crew) to our ship"
Static say_CrewMemberQuits $= "Crew member %(EventClass_Crew) quits;Commander %(EventClass_Crew) left"
Static say_JoinACrew $= "Joining commander %(EventClass_Captain) as crew member;Signing on for service with %(EventClass_Captain)"
Static say_QuitACrew $= "Leaving commander %(EventClass_Captain) ship;Resigning my commission, commander %(EventClass_Captain)"
Static say_KickCrewMember $= "Kicking %(EventClass_Crew);Removed crew %(EventClass_Crew);%(EventClass_Crew) is removed from the ship"

Static say_DatalinkVoucher $= "{Scanned datalink;Downloaded datalink}{, voucher received is worth;, that's worth} %(EventClass_Reward) credits from %rs(EventClass_PayeeFaction,say_ss)"
Static say_DatalinkScan $= "Scanned data link, %(EventClass_Type)"
Static say_DataScanned $= "Scanned %sc(EventClass_Type)"
Static say_Died $= "Here lies the bones of commander %(Commander), dead and buried; Your dead and buried commander %(Commander);I'll send for the under taker commander %(Commander);Ashes to ashes, dust to dust, your toast Commander %(Commander)"
Static say_Docked $= "{Docked at %(EventClass_StationName), %ifnotempty(EventClass_StationType,\"%(EventClass_StationType) type\")}{. }{This is a %(EventClass_Economy_Localised) station;Station economy is %(EventClass_Economy_Localised)}"
Static say_DockSRV $= "Surface Recon Vehicle back on board Commander;Boarded mothership Commander, prepare for flight operations;Entering mothership"
Static say_DockingDenied $= "Appears busy commander, confirming %(EventClass_StationName) has denied docking;Docking was denied at %(EventClass_StationName)"
Static say_DockingGranted $= "Commander, confirmed for landing pad %(EventClass_LandingPad);Confirmed landing on pad %(EventClass_LandingPad); Landing pad %(EventClass_LandingPad) is ready for landing"
Static say_DockingRequested $= "Sent docking request;Requested docking"
Static say_DockingTimeout $= "Too late commander, permission has been withdrawn to dock;Took to long commander, permission to dock withdrawn"
Static say_DockingCancelled $= "Docking cancelled;Cancelled docking request"
Static say_DockFighter $= "Fighter docked with mothership Commander;Fighter back on board;Fighter docked succesfully, Commander;Fighter retrieved"

Static say_edsmscannoinfo $= "No other information on system.;Ship computer has no other information on this system;Lookup of Wiki Pedia has failed! I can't find anything on this system; Google search on this system indicates no information available;System information unavailable"
Static say_edsmscanstarsplanets $= "Total of %(totalstars) %ifne(totalstars,\"1\",\"stars\",\"star\") and %(totalplanets) %ifne(totalplanets,\"1\",\"planets\",\"planet\") in this system"

Static say_edsmscanstarinfo $= "%(type) %rs(name,say_ss), Type %(startype), Mass %roundnz(mass,1,0.#,4) Sols, %ifnonzero(planets,\" %(planets) planets\"). "
Static say_edsmscanstarnoinfo $= "No information on %(type) %rs(ownname,say_ss), %ifnonzero(planets,\" %(planets) planets\"). "
Static say_edsmscanstarbarycentre $= "Barycentre %rs(ownname,say_ss), %ifnonzero(planets,\" %(planets) planets\"). "

Static say_edsmscanbodystarinfo $= "%rs(pname,say_ss), %sc(stype), mass %roundnz(mass,1,0.#,4) Sols. "
Static say_edsmscanbodyinfo $= "%rs(pname,say_ss), %(terraform)%(class)%ifnotcontains(landable,\"Not \",\", Landable\")"
Static say_edsmscanbodyinfoAtmos $= "%ifnotempty(atmos,\", %(atmos)\")%ifnotcontains(atmos,\"atmosphere\",\" atmosphere \",\"\",\"\")"
Static say_edsmscanbodyinfoVolcanism $= "%ifnotempty(volcanism, \", %(volcanism)\")"
Static say_edsmscanbodyinfoMat $= ", Materials detected "
Static say_edsmscanbodynoinfo $= "No information on %(ownname). "

Static say_EjectCargo $= "%iftrue(EventClass_Abandoned,\"Abandon\",\"Eject\") %(EventClass_Count) units of %(EventClass_FriendlyType) to space;Ejected %(EventClass_FriendlyType);Dumped %(EventClass_FriendlyType)"

Static say_FetchRemoteModule $= "Module %sc(EventClass_StoredItemLocalised) being retrieved, cost %(EventClass_TransferCost) credits"
Static say_FactionKillBond $= "Reward for combat from faction %rs(EventClass_AwardingFaction,say_ss) against %rs(EventClass_VictimFaction,say_ss), %(EventClass_Reward) credits"

Static say_Friends $= "%ifEqual(EventClass_Status,\"Offline\",\"Friend \")%ifEqual(EventClass_Status,\"Online\",\"Friend \")%(EventClass_Name) %ReplaceVar(EventClass_Status,say_friendsub)"
Static say_friendsub1 $= "Added;has been added as a friend"
Static say_friendsub2 $= "Requested;requests to be added as a friend"
Static say_friendsub3 $= "Online;is online"
Static say_friendsub4 $= "Offline;is offline"
Static say_friendsub5 $= "Declined;has declined your friendship"

Static say_EngineerProgressRank $= "Congratulations, you've made rank %(EventClass_Rank), with Engineer %(EventClass_Engineer)"
Static say_EngineerProgressState $= "Engineer %(EventClass_Engineer) has set your state to %(EventClass_Progress)"
Static say_EngineerProgress $= "%ifnotempty(EventClass_Progress,say_EngineerProgressState,say_EngineerProgressRank)"

Static say_EngineerApply $= "Applied blueprint %sc(EventClass_Blueprint) to ship, from Engineer %(EventClass_Engineer).  This is a level %(EventClass_Level) effect. %ifnotempty(EventClass_Override,\"%(EventClass_Override) was applied\") "
Static say_EngineerCraft $= "Crafted blueprint %sc(EventClass_Blueprint), from Engineer %(EventClass_Engineer).  This is a level %(EventClass_Level) effect. Ready to apply "

Static say_EscapeInterdiction $= "Evaded interdiction by %iftrue(EventClass_IsPlayer,say_EscapeInterdictionPlayer)%iffalse(EventClass_IsPlayer,say_EscapeInterdictionNPC)"
Static say_EscapeInterdictionPlayer $= "Commander %(EventClass_Interdictor)"
Static say_EscapeInterdictionNPC $= "N P C %(EventClass_Interdictor)"

Static say_FuelScoop $= "{Refueled;Scooped}{ %round(EventClass_Scooped,2,0.##) tons of fuel, }{leaving level at;fuel level is now} %round(EventClass_Total,2,0.##) tons"

Static say_FSDJump $= "Arrived at %rs(EventClass_StarSystem,say_ss), %(visit)%ifnonzero(EventEDDBPopulation,\"Populated, \") jump distance %round(EventClass_JumpDist,1,0.0) light years"
Static say_FSDJumpVisit $= "First visit, ;Second visit, ;Third Visit, ;Fourth visit, ;Fifth visit, ;Sixth Visit,;"
Static say_FSDJumpFuel $= ", Fuel used %round(EventClass_FuelUsed,1,0.0) tons, Fuel left %round(EventClass_FuelLevel,1,0.0) tons"
Static say_FSDJumpFaction $= ", System controlled by %rs(EventClass_Faction,say_ss) %ifnotempty(EventClass_FactionState,\"in state %(EventClass_FactionState)\")"
Static say_FSDJumpFuelWarning $= "Alert commander, fuel level is low;Fuel level is low;Warning, running low on gas here"

Static say_HullDamageCritical $= "Alert, Alert, Damage is critical at %(health) %"
Static say_HullDamage $= "{Warning Commander, ;Commander, Alert, }Hull Damage is at %(health) %"
Static say_HeatWarning $= "Warning Commander, gaining heat;Its hot in here, watch out;Heating up Commander"
Static say_HeatDamage $= "Warning Commander, damage from heat sustained;Heat damage sustained;Ship damaged from over heating"

Static say_InterdictionSuccess $= "%iftrue(EventClass_IsPlayer,say_InterdictionSuccessPlayer) %iffalse(EventClass_IsPlayer,say_InterdictionSuccessNPC)"
Static say_InterdictionSuccessPlayer $= "Interdicted Human %(EventClass_CombatRank) Commander %(EventClass_Interdicted)"
Static say_InterdictionSuccessNPC $= "Interdicted N P C %(EventClass_Interdicted) %ifnotempty(EventClass_Faction,say_InterdictedFaction)"
Static say_InterdictionFailure $= "%iftrue(EventClass_IsPlayer,say_InterdictionFailurePlayer) %iffalse(EventClass_IsPlayer,say_InterdictionFailureNPC)"
Static say_InterdictionFailurePlayer $= "Failed to interdict Human %(EventClass_CombatRank) Commander %(EventClass_Interdicted)"
Static say_InterdictionFailureNPC $= "Failed to inderdict N P C %(EventClass_Interdicted) %ifnotempty(EventClass_Faction,say_InterdictedFaction)"

Static say_Interdicted $= "%iftrue(EventClass_IsPlayer,say_InterdictedPlayer) %iffalse(EventClass_IsPlayer,say_InterdictedNPC)"
Static say_InterdictedPlayer $= "Human Commander Alert!, %iftrue(EventClass_Submitted,say_InterdictedSubmitted) interdiction by %(EventClass_CombatRank) Commander %(EventClass_Interdictor)"
Static say_InterdictedNPC $= "N P C Alert!, %iftrue(EventClass_Submitted,say_InterdictedSubmitted) interdiction by %(EventClass_Interdictor), %ifnotempty(EventClass_Faction,say_InterdictedFaction)"
Static say_InterdictedFaction $= "of faction %rs(EventClass_Faction,say_ss)"
Static say_InterdictedSubmitted $= "Submitted to"

Static say_JetConeBoost $= "Frame Shift Drive super charged by %round(EventClass_BoostValue,2,0.##) times; Drive boosted by %round(EventClass_BoostValue,2,0.##) times"
Static say_JetConeDamage $= "{Alert Commander, neutron star jet cone has damaged module %(EventClass_ModuleLocalised), }Take immediate evasive manoeuvre; Escape from cone immediately;Emergency escape now"

Static say_Liftoff $= "Liftoff from planet;Ship is free of surface;Launch!;Takeoff sequence in progress Commander"
Static say_LaunchSRV $= "Launch Surface Recon Vehicle with %(EventClass_Loadout) loadout."
Static say_LaunchFighter $= "{Fighter is launching commander;Deploying fighter}, %iftrue(EventClass_PlayerControlled,\" prepare to take controls\", \" crew member is taking command\") "

Static say_MaterialCollected $= "Collected %(EventClass_Count) items of material %(EventClass_FriendlyName)"
Static say_MaterialDiscarded $= "Discarded material %(EventClass_FriendlyName) %(EventClass_Count) items"
Static say_MaterialDiscovered $= "Discovered new material %(EventClass_FriendlyName)"
Static say_MarketBuy $= "Bought %(EventClass_Count) units of %(EventClass_FriendlyType), Buy price is %(EventClass_BuyPrice) credits, total cost is %(EventClass_TotalCost) credits"
Static say_MarketSell $= "Sold %(EventClass_Count) units of %(EventClass_FriendlyType), Sell price is %(EventClass_SellPrice) credits, total sale is %(EventClass_TotalSale) credits, you made %(profit) credits"
Static say_MiningRefined $= "Refined %(EventClass_FriendlyType);%(EventClass_FriendlyType) Refined"

Static say_MissionAbandoned $= "%sc(EventClass_Name) has been abandoned;Abandoned mission %sc(EventClass_Name);Aborted mission %sc(EventClass_Name)"
Static say_MissionAccepted $= "%sc(EventClass_Name) accepted %ifnotempty(EventClass_Faction,\"from faction %rs(EventClass_Faction,say_ss),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationSystem,\" Mission destination is %rs(EventClass_DestinationSystem,say_ss),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationStation,\" station %(EventClass_DestinationStation),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_Target,\" target is %(EventClass_Target),\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_TargetFaction,\"of %rs(EventClass_TargetFaction,say_ss) faction,\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_PassengerType,\"taking %(EventClass_PassengerCount) passengers of type %(EventClass_PassengerType).\")"
Static say_MissionAccepted $+= "%ifnotempty(EventClass_Expiry,\" This mission expires on %date(EventClass_Expiry,longdatetime),\")"

Static say_MissionCompleted $= "{Congratulations, ;Well done Commander, ;Good Job, ;Splendid! }%sc(EventClass_Name) completed %ifnotempty(EventClass_Faction,\"from faction %rs(EventClass_Faction,say_ss),\")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_Target,\" target was %(EventClass_Target),\")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_TargetFaction,\"of %rs(EventClass_TargetFaction,say_ss) faction,\")"
Static say_MissionCompleted $+= "%ifnotempty(EventClass_Reward,\"Reward is %(EventClass_Reward) credits,\")"
Static say_MissionFailed $= "%sc(EventClass_Name) has failed;Failed mission %sc(EventClass_Name)"

Static say_ModuleBuy $= "Module %sc(EventClass_BuyItemLocalised) fitted, cost %(EventClass_BuyPrice) credits, on ship %ship(EventClass_Ship) in %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot)."
Static say_ModuleBuy $+= "%ifnotempty(EventClass_SellItemLocalised,\" Sold Module %(EventClass_SellItemLocalised) for %(EventClass_SellPrice) credits.\")"
Static say_ModuleRetrieve $= "Retrieved module %sc(EventClass_RetrievedItemLocalised) and fitted it to ship %ship(EventClass_Ship) into %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot)."
Static say_ModuleSell $= "Module %sc(EventClass_SellItemLocalised) removed, reimbursement price is %(EventClass_SellPrice) credits, on ship %ship(EventClass_Ship) in %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot)."
Static say_ModuleSellRemote $= "Sold remote module %sc(EventClass_SellItemLocalised), sell price is %(EventClass_SellPrice) credits."
Static say_ModuleStore $= "Module %sc(EventClass_StoredItemLocalised) removed from ship %ship(EventClass_Ship). %ifnotempty(EventClass_Cost,\"Store cost is %(EventClass_Cost) credits\")"
Static say_ModuleSwap $= "Swap modules between %ifnotcontains(EventClass_FromSlot,\"slot\",\"slot \")%sc(EventClass_FromSlot) and %ifnotcontains(EventClass_ToSlot,\"slot\",\"slot \")%sc(EventClass_ToSlot)"
Static say_MassModuleStore $= "Stored multiple modules from ship %ship(EventClass_Ship)."

Static say_PayFines $= "Paid %(EventClass_Amount) credits in fines Commander%ifnonzero(EventClass_BrokerPercentage,\", with a commission to the broker of %(EventClass_BrokerPercentage) percent\")"
Static say_PayLegacyFines $= "Paid %(EventClass_Amount) credits in legacy fines Commander%ifnonzero(EventClass_BrokerPercentage,\", with a commision to the broker of %(EventClass_BrokerPercentage) percent\")"
Static say_Promotion $= "Congratulations, you've been promoted!"
Static say_Promotion $+= "%ifnotempty(EventClass_Combat,\", Combat rank to %sc(EventClass_Combat)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Trade,\", Trade rank to %sc(EventClass_Trade)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Explore,\", Explorer rank to %sc(EventClass_Explore)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Federation,\", Federation rank to %sc(EventClass_Federation)\")"
Static say_Promotion $+= "%ifnotempty(EventClass_Empire,\", Empire rank to %sc(EventClass_Empire)\")"
Static say_PowerplayCollect $= "Collected power play commodities for delivery for %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) items"
Static say_PowerplayDefect $= "Defecting from %(EventClass_FromPower) to %(EventClass_ToPower)"
Static say_PowerplayDeliver $= "Delivering power play commodities for power %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) items"
Static say_PowerplayFastTrack $= "Fast track payment to power %(EventClass_Power), cost is %(EventClass_Cost) credits"
Static say_PowerplayJoin $= "Joining %(EventClass_Power), good luck commander"
Static say_PowerplayLeave $= "Leaving %(EventClass_Power)"
Static say_PowerplaySalary $= "Power play salary received from %(EventClass_Power) of %(EventClass_Amount) credits"
Static say_PowerplayVote $= "Voted for power %(EventClass_Power) to take over system %rs(EventClass_System,say_ss), votes are currently %(EventClass_Votes)"
Static say_PowerplayVoucher $= "Reward for Power Play combat from %(EventClass_Power) in systems %expandarray(EventClass_Systems,\", \",0,20,splitcaps)"
Static say_PVPKill $= "Congratulations, that scum %(EventClass_CombatRank) Commander %(EventClass_Victim) is pushing up the weeds now in heaven or hell;%(EventClass_CombatRank) Commander %(EventClass_Victim) despatched to another world"

Static say_RebootRepair $= "Rebooting and repairing modules %expandarray(EventClass_Modules,\", \",0,20,splitcaps)"
Static say_RedeemVoucher $= "Redeeming %(EventClass_Type) worth %(EventClass_Amount) %ifnotempty(EventClass_Faction,\" from faction %sc(EventClass_Faction)\")%ifnonzero(EventClass_BrokerPercentage,\", with a commission to the broker of %(EventClass_BrokerPercentage) percent\")"

Static say_Repair $= "{Repaired %(EventClass_ItemLocalised) Commander;%(EventClass_ItemLocalised) repaired}. Cost is %(EventClass_Cost) credits"

Static say_RepairAll $= "{Damage repaired;Ship fully repaired}{. Cost is %(EventClass_Cost) credits. }Ready for action Commander;Ready to launch"
Static say_RefuelAll $= "{Ship fully refuelled;Refuelled ship}, cost is %(EventClass_Cost) credits, fuel %round(EventClass_Amount,1,0.0) tons"
Static say_RefuelPartial $= "Ship partially refuelled, cost %(EventClass_Cost) credits, fuel %round(EventClass_Amount,1,0.0) tons"
Static say_RestockVehicle $= "Bought %(EventClass_Count) %(EventClass_Type) of type %(EventClass_Loadout), Cost %(EventClass_Cost) credits"
Static say_Resurrect $= "{As if by magic, your alive again Commander %(Commander);Alive again Commander to fight another day}, cost was %(EventClass_Cost) credits"
Static say_ReceiveText $= "Message from %Alt(EventClass_FromLocalised,EventClass_From), %Alt(EventClass_MessageLocalised,EventClass_Message)"

Static say_SellExplorationData $= "Sold %(EventClass_Systems_Length) star systems for %(EventClass_BaseValue) credits."
Static say_SellExplorationDataBonus $= "And discovered %(EventClass_Discovered_Length) bodies for %(EventClass_Bonus) bonus credits"
Static say_SendText $= "Message sent to %Alt(EventClass_To_Localised,EventClass_To)"

Static say_Scanned $= "Warning, %(EventClass_ScanType) scan detected;A Ship is performing a %(EventClass_ScanType) scan on us;%(EventClass_ScanType) scan detected commander;We are being scanned for %(EventClass_ScanType);%(EventClass_ScanType) scan detected"
Static say_ScanStar $= "Scanned Star %rs(EventClass_BodyName,say_ss), %(EventClass_StarTypeText)"
Static say_ScanStarMassMag $= ", %roundnz(EventClass_nStellarMass,1,0.#,4) stellar masses"
Static say_ScanStarMassMag $+= ", Absolute Magnitude %round(EventClass_nAbsoluteMagnitude,1,M0.#)"
Static say_ScanStarInOrbit $= ", orbital period %round(period,1,0.#) days"
Static say_ScanStarHabitableZone $= ", Habitable Zone %round(EventClass_HabitableZoneInner,0,0) to %round(EventClass_HabitableZoneOuter,0,0) light seconds"
Static say_ScanStarAge $= ", Age %round(EventClass_nAge,1,0.#) million years"

Static say_ScanPlanet $= "Scanned %rs(EventClass_BodyName,say_ss), %sc(EventClass_TerraformState) %rs(EventClass_PlanetClass,say_ss)"
Static say_ScanPlanetDistance $= ", Distance from arrival %round(EventClass_DistanceFromArrivalLS,1,#.0) light seconds"
Static say_ScanPlanetLandable $= ", Landable"
Static say_ScanPlanetAtmosphere $= ", %sc(EventClass_Atmosphere)"
Static say_ScanPlanetNoAtmosphere $= ", No Atmosphere"
Static say_ScanPlanetVolcanism $= ", %(EventClass_Volcanism)"
Static say_ScanPlanetTidallyLocked $= ", Tidally locked"
Static say_ScanPlanetRotation $= ", Rotation Period %round(rotation,1,0.#) days"
Static say_ScanPlanetOrbitalPeriod $= ", Orbital Period %round(period,1,0.#) days"
Static say_ScanPlanetMass $= ", Mass %round(EventClass_nMassEM,3,0.###) earth masses"
Static say_ScanPlanetMoonMass $= ", Mass %roundnz(moonmass,2,0.##,4) moon masses"
Static say_ScanPlanetGravity $= ", Gravity %roundnz(gravity,1,0.#,4) gee"
Static say_ScanPlanetTemperature $= ", Temperature %round(EventClass_nSurfaceTemperature,0,0.#) kelvin"
Static say_ScanPlanetPressure $= ", Pressure %roundnz(EventClass_nSurfacePressure,1,0.#,4) Pascal"
Static say_ScanPlanetNoSurfacePressure $= ", No surface pressure"
Static say_ScanPlanetMaterials $= ", Materials detected %ExpandVars(EventClass_Materials_,\", \",0,1000,\"nameonly splitcaps\")"

Static say_Screenshot $= "Screen shot captured of %rs(EventClass_System,say_ss) system, body %(EventClass_Body)"

Static say_SellDrones $= "Sold %(EventClass_Count) %(EventClass_Type) for %(EventClass_TotalSale) credits"
Static say_SelfDestruct $= "Preparing for launch of escape capsule commander, vehicle self destructing"
Static say_ScientificResearch $= "Contributed to scientific research %sc(EventClass_Name), %(EventClass_Count) items, %sc(EventClass_Category) category"

Static say_ShipyardBuy $= "Bought ship %ship(EventClass_ShipType) at %(EventClass_ShipPrice) credits"
Static say_ShipyardBuy $+= "%ifnotempty(EventClass_StoreOldShip,\", Stored ship %ship(EventClass_StoreOldShip) in hangar\")"
Static say_ShipyardBuy $+= "%ifnotempty(EventClass_SellOldShip,\", Sold ship %ship(EventClass_SellOldShip) for %(EventClass_SellPrice) credits\")"
Static say_ShipyardSell $= "Sold ship %ship(EventClass_ShipType) for %(EventClass_ShipPrice) credits%ifnotempty(EventClass_System, \" at system %rs(EventClass_System,say_ss)\")"
Static say_ShipyardNew $= "{Congratulations on }{buying a brand new;your new purchase of a} %(EventClass_ShipType) ship"
Static say_ShipyardSwap $= "Swapped ship %ship(EventClass_StoreOldShip) for a %ship(EventClass_ShipType)"
Static say_ShipyardTransfer $= "Ordered the transfer of ship %ship(EventClass_ShipType) from system %rs(EventClass_System,say_ss) at %round(EventClass_Distance,1,0.0) light years, cost will be %(EventClass_TransferPrice) credits"

Static say_SupercruiseEntry $= "Warp engines on;Supercruise engaged;Frame shift drive engaged;Hold on tight, Supercruising"
Static say_SupercruiseExit $= "{Exiting supercruise;Normal space commander;Warp engines off, Impulse engaged}%ifnotempty(EventClass_BodyType,\", Arrived at %sc(EventClass_BodyType)\")%ifnotempty(EventClass_Body,\", %rs(EventClass_Body,say_ss)\")"

Static say_shieldsdown $= "Alert shields are down, evasive manoeuvres;Shields are down;Danger no shields, run;Don't Panic, but we have no shields!"
Static say_shieldsup $= "Shields restored;Shields back on line commander;Shields operational, Commander"

Static say_SetUserShipName $= "I name this ship of type %(EventClass_Ship), and call it %(EventClass_ShipName) with registration %(EventClass_ShipIdent).  May god bless all who sail the stars in her!"

Static say_StartJump $= "%ifcontains(EventClass_JumpType,\"Hyperspace\",\"%expand(say_StartHyperspace)\",\"%expand(say_StartSupercruise)\")"
Static say_StartHyperspace $= "{Prepare for Hyperspace;Jumping}{ to system %(EventClass_StarSystem), Star is %(EventClass_StarClass) class,}{.;. Hold on tight!;. Warp drive engaging;. Make it So!}"
Static say_StartSupercruise $= "Entering supercruise;Prepare for supercruise"

Static say_Synthesis $= "Synthesis of %sc(EventClass_Name) performed"

Static say_Touchdown $= "{Landing successful commander;Landed commander;Touchdown!}{ at Lattitude %round(EventClass_Latitude,2,M0.##), Longitude %round(EventClass_Longitude,2,M0.##), }Well done commander;Engines off;Prepare for surface operations"

Static say_Undocked $= "Undocked from %sc(EventClass_StationName) fly safe commander;Ship ready, your in control Commander; Engines on, departing %sc(EventClass_StationName);Departing station %sc(EventClass_StationName)"
Static say_USSDrop $= "Dropped into U S S type %(EventClass_USSTypeLocalised), threat level is %(EventClass_USSThreat)"

Static say_VehicleSwitch $= "Switching to %sc(EventClass_To)"

Static say_WingAdd $= "Commander %sc(EventClass_Name) has joined the wing"
Static say_WingJoin $= "Joined wing with Commander %expandarray(EventClass_Others,\", Commander \", 0, 32)"
Static say_WingLeave $= "Leaving wing Commander"
Static say_WingInvite $= "Invited to wing by %(EventClass_Name)"

// WingInvite, Friends, EngineeringCont

Rem subsitution patterns (ss1,ss2 etc) for faction and body name fields
Static say_ss1 $= "-; dash "
Static say_ssn1 $= " I ; 1 "
Static say_ssn2 $= " II ; 2 "
Static say_ssn3 $= " III ; 3 "
Static say_ssn4 $= " IV ; 4 "
Static say_ssn5 $= " V ; 5 "

Rem say subsitution patterns, applied after the phrase has been made, are called say_txN in the same form as above.

Static say_tx1 $= "terraforming; Terra Forming"
Static say_tx2 $= "terraformable; Terra Formable"
Static say_tx3 $= "CMDR ;Commander "
Static say_tx4 $= " Cr ; Credits "

Static SpeechDefinitionFile = SetUpLanguageEnglish
Static SpeechCulture = en-gb

If SpeechControls NotPresent
    Print ****
    Print Setting voice pack control to default values, use the Add-On menu Voice Pack Configuration to reconfigure
    Print ****
    PersistentGlobal SpeechControls = NPCVoicesEnable;FirstJumpOnly;FSDFactionDisable;ScanHabZoneEnable;EDSMSummaryEnable;EDSMMoonsEnable;EDSMSubMoonsEnable;EDSMAtmosphereEnable;EDSMVolcanismEnable;

END PROGRAM

//*************************************************************
// onStartup
// Events: onStartup
//*************************************************************
PROGRAM onStartup

Call SetUpLanguage

Set speech = %(say_welcome)
Call speak(speech="%(speech)")

Print Voice Pack installed, running on EDD Version %version(1).%version(2).%version(3).%version(4)
Call Initialise

END PROGRAM

//*************************************************************
// onInstall
// Events: onInstall
//*************************************************************
PROGRAM onInstall

If InstallList Contains VoicePack
    Call SetUpLanguage
    Say %(say_install)
Call Initialise

END PROGRAM

//*************************************************************
// Initialise
//*************************************************************
PROGRAM Initialise

MenuItem VoiceMenuConfigureVoice,add-ons,"Voice Synthesis Configuration",speaker
MenuItem VoiceMenuConfigureVerbosity,add-ons,"Voice Pack Configuration",speaker
MenuItem VoiceMenuConfigureSpeechFile,add-ons,"Edit speech file",missioncompleted
MenuItem VoiceMenuShowHelp,help,"Voice Pack",speaker

END PROGRAM

//*************************************************************
// SetUpLanguage
//*************************************************************
PROGRAM SetUpLanguage

Rem do these.. If %(CurrentCulture) Contains sv
Call SetUpLanguageEnglish

END PROGRAM

//*************************************************************
// onShutdown
// Events: onShutdown
//*************************************************************
PROGRAM onShutdown

Set speech = "%phrase(\"%expand(say_shutdown)\")"
Call speak(speech="%(speech)",Wait=1)

END PROGRAM

//*************************************************************
// onRefreshEnd
// Events: onRefreshEnd
//*************************************************************
PROGRAM onRefreshEnd

If %(RefreshCount) <= 1
    Event PREFIX LAST_ LAST
    Ledger PREFIX LED_ AtOrBefore %(LAST_JID)
    Event PREFIX RK_ LAST Rank
    Set speech = "%phrase(\"%expand(say_refresh)\")"
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// ReceiveText
// Events: ReceiveText
//*************************************************************
PROGRAM ReceiveText

If EventClass_Channel $!= npc
    Set v = say_%(EventClass_EventTypeStr)                      // make up variable name from event name
    Set speech = "%phrase(\"%indirect(v)\")"                    // now expand any phrases in it
    Call speak(speech="%(speech)")
Else If SpeechControls IsPresent And SpeechControls Contains NPCChatterDisable;
    Rem Print no NPC chatter
Else If SpeechControls NotPresent Or SpeechControls NotContains NPCVoicesEnable;
    Set v = say_%(EventClass_EventTypeStr)                      // make up variable name from event name
    Set speech = "%phrase(\"%indirect(v)\")"                    // now expand any phrases in it
    Call speak(speech="%(speech)")
Else
    Set from = "%Alt(EventClass_FromLocalised,EventClass_From)"
    Set npcvar = "say_npc_%SafeVarName(\"%(from)_%(EventWhereAmI)\")"
    // print Looking up NPCVar: %(npcvar)
    If "%exist(\"%(npcvar)\")" IsTrue
        Set voice = %indirect(npcvar)
        Set pitchshift = "%indirect(\"%(npcvar)_pitch\")"
        Set rate = "%indirect(\"%(npcvar)_rate\")"
    Else
        Perform voicenames
        Let voicecount = %WordListCount(VoiceNames)
        Let rnvoice = %Random(voicecount)
        // print %(VoiceNames) count %(voicecount) pick %(rnvoice)
        Set voice = "%WordListEntry(VoiceNames,rnvoice)"

        If SpeechVoice IsPresent And voice $== %(SpeechVoice)
            If %Random(2) == 0
                Let pitchshift = 70+%Random(20)
            Else
                Let pitchshift = 107+%Random(10)
        Else
            Let pitchshift = 70+%Random(40)

        If pitchshift < 80
            Let rate = %Random(3)+1
        Else If pitchshift < 101
            Let rate = %Random(4)-1
        Else
            Let rate = %Random(4)-2
        Static %(npcvar) = %(voice)
        Static %(npcvar)_pitch = %(pitchshift)
        Static %(npcvar)_rate = %(rate)
        print for %(from) chose %(voice) at pitch %(pitchshift) rate %(rate)

    // if ( EventClass_Channel $== "npc" ) And (EventClass_From $== "%(EventWhereAmI)" Or EventClass_FromLocalised $== "%(EventWhereAmI)" )
    // print from station


    Set effectspath = %systempath(EDDSOUNDFOLDER)
    Set presound = %(effectspath)\\npcprefix.mp3
    Set postsound = %(effectspath)\\npcpostfix.mp3
    Set mixsound = %(effectspath)\\npcmix.mp3

    // print %(presound) %(postsound)
    If %fileexists(presound) IsFalse
        Set presound = ""
    If %fileexists(postsound) IsFalse
        Set postsound = ""
    If %fileexists(mixsound) IsFalse
        Set mixsound = ""

    // print Result %(presound) %(postsound) %(mixsound)

    Set speech = "%Alt(EventClass_MessageLocalised,EventClass_Message)"

    // we override the SoundEffects global by providing at least on speech effect, PitchShift
    Call speak(speech="%(speech)",Voice="%(voice)",PitchShift="%(pitchshift)",PrefixSound="%(presound)",PostfixSound="%(postsound)",MixSound="%(mixsound)",Rate="%(rate)")

END PROGRAM

//*************************************************************
// HullDamage
// Events: HullDamage
//*************************************************************
PROGRAM HullDamage

Let health100 = %(EventClass_Health)*100,health = "%floor(health100,N0)"
If health < 50
    Set speech = "%phrase(\"%expand(say_HullDamageCritical)\")"
    Call speak(speech="%(speech)", Volume=100)
Else
    Set speech = "%phrase(\"%expand(say_HullDamage)\")"
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// ShieldState
// Events: ShieldState
//*************************************************************
PROGRAM ShieldState

If EventClass_ShieldsUp IsTrue
    Set speech = "%phrase(\"%expand(say_shieldsup)\")"
Else
    Set speech = "%phrase(\"%expand(say_shieldsdown)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// CommitCrime
// Events: CommitCrime
//*************************************************************
PROGRAM CommitCrime

If EventClass_Bounty IsNotEmpty
    Set speech = %expand(say_CommitCrimeBounty)
Else
    Set speech = %expand(say_CommitCrimeFine)

Set speech = "%phrase(\"%(speech)\")"
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// FSDResponse
// Events: FSDJump
//*************************************************************
PROGRAM FSDResponse

Event FROM %(EventJID) INFO
Set visit = %expand(say_FSDJumpVisit)
Set visit = "%wordof(visit, EC_VisitCount)"

Set speech = %expand(say_FSDJump)
If EventClass_FuelLevel <= 4
    Set speech += "%phrase(\"%expand(say_FSDJumpFuelWarning)\")"

If SpeechControls NotPresent Or SpeechControls NotContains FuelLevelDisable;
    Set speech += "%phrase(\"%expand(say_FSDJumpFuel)\")"

If (EventClass_Faction IsNotEmpty) And (SpeechControls NotPresent Or SpeechControls NotContains FSDFactionDisable;)
    Set speech += "%phrase(\"%expand(say_FSDJumpFaction)\")"

If SpeechControls IsPresent And SpeechControls Contains FirstJumpOnly; And EC_VisitCount >= 2
    Call speak(speech="%(speech)")
Else
    Call speak(speech="%(speech)",FinishEvent=FSD)
    Static ScanSystem = %(EventStarSystem)

END PROGRAM

//*************************************************************
// Scan
// Events: Scan
//*************************************************************
PROGRAM Scan

Event FROM %(EventJID) INFO

If %(EventClass_IsStar) IsTrue
    Set speech = %expand(say_ScanStar)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanStarMassDisable;
        Set speech += %expand(say_ScanStarMassMag)

        If EventClass_nOrbitalPeriod IsNotEmpty And EventClass_nOrbitalPeriod > 0
            Let period = %(EventClass_nOrbitalPeriod)/86400
            Set speech += %expand(say_ScanStarInOrbit)

    If SpeechControls IsPresent And SpeechControls Contains ScanHabZoneEnable;
        If EventClass_HabitableZoneInner IsNotEmpty And EventClass_HabitableZoneOuter IsNotEmpty And EventClass_HabitableZoneInner >= 5
            Set speech += %expand(say_ScanStarHabitableZone)
        If EventClass_nAge IsNotEmpty
            Set speech += %expand(say_ScanStarAge)

    Call speak(speech="%(speech)")
    End

Else
    Let gravity = %(EventClass_nSurfaceGravity)/9.8
    Let rotation = %(EventClass_nRotationPeriod)/86400
    Let period = %(EventClass_nOrbitalPeriod)/86400

    Set speech = %expand(say_ScanPlanet)

    If SpeechControls NotPresent Or SpeechControls NotContains ScanPlanetBasicInformationDisable;
        Set speech += %expand(say_ScanPlanetDistance)

        If %(EventClass_IsLandable) IsTrue
            Set speech += %expand(say_ScanPlanetLandable)

        If %(EventClass_Atmosphere) IsNotEmpty And %(EventClass_Atmosphere) $!= None
            Set speech += %expand(say_ScanPlanetAtmosphere)
        Else
            Set speech += %expand(say_ScanPlanetNoAtmosphere)

    If SpeechControls IsPresent And SpeechControls Contains ScanPlanetExtendedInformationEnable;
        If %(EventClass_Volcanism) IsNotEmpty
            Set speech += %expand(say_ScanPlanetVolcanism)

        If %(EventClass_nTidalLock) $== 1
            Set speech += %expand(say_ScanPlanetTidallyLocked)
        Else
            Set speech += %expand(say_ScanPlanetRotation)

        Set speech += %expand(say_ScanPlanetOrbitalPeriod)

        If %(EventClass_nMassEM) < 0.01
            Let moonmass = %(EventClass_nMassEM)/0.0123
            Set speech += %expand(say_ScanPlanetMoonMass)
        Else
            Set speech += %expand(say_ScanPlanetMass)

        Set speech += %expand(say_ScanPlanetGravity)

        Set speech += %expand(say_ScanPlanetTemperature)

        If %(EventClass_nSurfacePressure) IsNotEmpty And %(EventClass_nSurfacePressure) > 0
            Let atpressure = %(EventClass_nSurfacePressure)/101.325
            Set speech += %expand(say_ScanPlanetPressure)
        Else
            Set speech += %expand(say_ScanPlanetNoSurfacePressure)

    If SpeechControls IsPresent And SpeechControls Contains ScanPlanetMaterialInformationEnable;
        If %(EventClass_MaterialsCount) > 0
            Set speech += %expand(say_ScanPlanetMaterials)

    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// SellExplorationData
// Events: SellExplorationData
//*************************************************************
PROGRAM SellExplorationData

Set speech = "%phrase(\"%expand(say_SellExplorationData)\")"

If EventClass_Discovered_Length >= 1
    Set speech += " %phrase(\"%expand(say_SellExplorationDataBonus)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Interdiction
// Events: Interdiction
//*************************************************************
PROGRAM Interdiction

If EventClass_Success IsTrue
    Set speech = "%phrase(\"%expand(say_InterdictionSuccess)\")"
Else
    Set speech = "%phrase(\"%expand(say_InterdictionFailure)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// MarketSell
// Events: MarketSell
//*************************************************************
PROGRAM MarketSell

Let profit = (%(EventClass_SellPrice)-%(EventClass_AvgPricePaid))*%(EventClass_Count)
Set speech = "%phrase(\"%expand(say_MarketSell)\")"
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Friends
// Events: Friends
//*************************************************************
PROGRAM Friends

If (EventClass_Status $== Online Or EventClass_Status $== Offline) And (SpeechControls IsPresent And SpeechControls Contains FriendsStatusDisable;)
    Rem Print mute Friends $(EventClass_Status) of $(EventClass_Name)
Else
    Call GenericResponse(EventClass_*=Pass)

END PROGRAM

//*************************************************************
// SaySystemInfo
// Events: onSayFinished?(EventName $== FSD), onTimer?(TimerName $== ScanDelay)
//*************************************************************
PROGRAM SaySystemInfo

// Print SaySysInfo %(ScanSystem) %(TriggerName)

If TriggerName $== onSayFinished                                // Trigger!
    Timer ScanDelay,"%eval(\"%random(10)*10+20\")"
    End
ElseIf SpeechControls NotPresent Or SpeechControls NotContains EDSMInformationDisable;
    Scan EDSM  "%(ScanSystem)"

    Set speech = ""

    If S_Stars == 0
        Set speech += "%phrase(\"%expand(say_edsmscannoinfo)\")"
    ElseIf SpeechControls IsPresent And SpeechControls Contains EDSMSummaryEnable;
        Let totalstars = 0
        Let totalplanets = 0

        Loop %(S_Stars),N
            Set prefix = S_Star_%(N)_
            Set type = "%indirect(\"%(prefix)type\")"
            If type $!= barycentre
                Let totalstars = %(totalstars)+1

            Set planets = "%indirect(\"%(prefix)Planets\")"
            Let totalplanets = %(totalplanets)+%(planets)

        Set speech += "%phrase(\"%expand(say_edsmscanstarsplanets)\")"
    Else
        Set excludestars = "%existsdefault(SpeechEDSMStarExclusion,\"\")"

        Loop %(S_Stars),S
            Set prefix = S_Star_%(S)_
            Set planets = "%indirect(\"%(prefix)Planets\")"
            Set data = "%indirect(\"%(prefix)data\")"
            Set type = "%indirect(\"%(prefix)type\")"
            Set ownname = "%indirect(\"%(prefix)assignedname\")"

            Let exclude = 0

            If type $== barycentre
                Set speech += %expand(say_edsmscanstarbarycentre)
            ElseIf data IsTrue
                Set name = "%indirect(\"%(prefix)bodyname\")"
                Set starclass = "%indirect(\"%(prefix)startype\")"
                Set startype = "%indirect(\"%(prefix)startypetext\")"
                Set mass = "%indirect(\"%(prefix)stellarmass\")"

                Rem we are going to look for A, ,A or just A

                If excludestars Contains %(starclass), Or excludestars Contains ,%(starclass) Or excludestars $== %(starclass)
                    Let exclude = 1
                Else
                    Set speech += %expand(say_edsmscanstarinfo)
            Else
                Set speech += %expand(say_edsmscanstarnoinfo)

            If exclude IsFalse
                Loop %(planets),P
                    Set prefix = S_Planet_%(S)_%(P)_
                    Call saySystemInfoBody(prefix="%(prefix)",S_*$=1)
                    Set speech += %(ReturnValue)

                    If SpeechControls IsPresent And SpeechControls Contains EDSMMoonsEnable;
                        Set moons = "%indirect(\"%(prefix)Moons\")"

                        Loop %(moons),M
                            Set prefix = S_Moon_%(S)_%(P)_%(M)_
                            Call saySystemInfoBody(prefix="%(prefix)",S_*$=1)
                            Set speech += %(ReturnValue)

                            If SpeechControls IsPresent And SpeechControls Contains EDSMSubMoonsEnable;
                                Set submoons = "%indirect(\"%(prefix)Submoons\")"

                                Loop %(submoons),SM
                                    Set prefix = S_SubMoon_%(S)_%(P)_%(M)_%(SM)_
                                    Call saySystemInfoBody(prefix="%(prefix)",S_*$=1)
                                    Set speech += %(ReturnValue)

    If speech IsNotEmpty                                        // Because we may have decided not to say anything!
        Set speech = "%replacevar(speech,\"say_tx\")"
        Say %(speech),Priority=Low,Literal=1

END PROGRAM

//*************************************************************
// saySystemInfoBody
//*************************************************************
PROGRAM saySystemInfoBody

Rem prefix in, plus all S_ variables

Set pdata = "%indirect(\"%(prefix)data\")"

If pdata IsTrue
    Set pname = "%indirect(\"%(prefix)bodyname\")"
    Set isstar = "%indirect(\"%(prefix)isstar\")"

    Rem print %(prefix) %(pname) star %(isstar)

    If isstar IsTrue
        Set stype = "%indirect(\"%(prefix)startypetext\")"
        Set mass = "%indirect(\"%(prefix)stellarmass\")"
        Return %expand(say_edsmscanbodystarinfo)

    Else
        Set terraform = "%indirect(\"%(prefix)terraformstate\")"
        Set class = "%indirect(\"%(prefix)class\")"
        Set landable = "%indirect(\"%(prefix)landable\")"

        Set speech = %expand(say_edsmscanbodyinfo)

        If SpeechControls IsPresent And SpeechControls Contains EDSMAtmosphereEnable;
            Set atmos = "%indirect(\"%(prefix)atmosphere\")"
            Set speech += %expand(say_edsmscanbodyinfoAtmos)

        If SpeechControls IsPresent And SpeechControls Contains EDSMVolcanismEnable;
            Set volcanism = "%indirect(\"%(prefix)volcanism\")"
            Set speech += %expand(say_edsmscanbodyinfoVolcanism)

        If SpeechControls IsPresent And SpeechControls Contains EDSMMaterialsEnable;
            Set matcount = "%indirect(\"%(prefix)MaterialsCount\")"
            If matcount > 0
                Set speech += %expand(say_edsmscanbodyinfoMat)
                Set speech += "%ExpandVars(\"%(prefix)Materials_\",\", \",1,1000,\"nameonly splitcaps\")"

        Set speech += ". "
        Return %(speech)
Else
    Set ownname = "%indirect(\"%(prefix)assignedname\")"
    Return %expand(say_edsmscanbodynoinfo)

END PROGRAM

//*************************************************************
// Menus
// Events: onMenuItem?(MenuName Contains VoiceMenu)
//*************************************************************
PROGRAM Menus

If MenuName Contains ConfigureVoice
    Perform ConfigureVoice "Configure Voice Synthesis"

If MenuName Contains ConfigureSpeechFile
    Perform EditSpeechText

If MenuName Contains ShowHelp
    MessageBox "Voice Pack (C) ED Discovery team\r\n\r\nUse Add-Ons | Manage to enable or disable this\r\nUse the speech configuration options in the Add-Ons menu to configure voice\r\nand set voice pack options","Voice Pack"

If MenuName Contains ConfigureVerbosity

    Set Def = ""
    Set dvar2a = "L2,Label,\"Speech file\",10,+50,80,20,\"\""
    Set dvar2b = "TBLF,TextBox,\"%existsdefault(SpeechLog,Def)\",100,+0,220,20,\"Empty means no speech file, else enter the file or use browse\""
    Set dvar2c = "BBROWSE,Button,Browse,350,+0,78,20,\"Select file to write speech output to\""
    Set dvar2d = "CBPR,CheckBox,\"Print date/time in log\",100,+30,140,20,\"Print time and date before text\",%IsPresent(SpeechControls,\"LogTimeDate;\",0)"

    Set dvar2e = "CBLL,CheckBox,\"Log Last only\",250,+0,140,20,\"Clear log before each speech output\",%IsPresent(SpeechControls,\"LogLastOnly;\",0)"
    Set dvar2f = "CBD,CheckBox,\"Disable Voice Output\",100,+30,200,20,\"Disable Voice Output, use to print only\",%IsPresent(SpeechControls,\"PrintOnly;\",0)"

    Set dvar3a = "L3,Label,\"Exclude Stars\",10,+40,80,20,\"\""
    Set dvar3b = "TBSTAR,TextBox,\"%existsdefault(SpeechEDSMStarExclusion,Def)\",100,+0,220,20,\"Exclude these stars from the read out of system information read after jumping, star types OBAFGKM, H,N,TTS, Wx etc, comma or space separated\""

    Set dvar4a = "L3,Label,\"General\",10,+40,80,20,\"\""
    Set dvar4b = "CBFR,CheckBox,\"Disable Friend Status\",100,+0,200,20,\"Friend status online/offline is muted\",%IsPresent(SpeechControls,\"FriendsStatusDisable;\",1)"

    Set dvar41a = "L3,Label,\"NPC\",10,+40,80,20,\"\""
    Set dvar41b = "CBN,CheckBox,\"Disable NPC Chatter\",100,+0,200,20,\"Disable NPC Chatter\",%IsPresent(SpeechControls,\"NPCChatterDisable;\",0)"
    Set dvar41c = "CBNMV,CheckBox,\"Enable NPC Voices\",+200,+0,200,20,\"Pick different voices for each NPC\",%IsPresent(SpeechControls,\"NPCVoicesEnable;\",1)"

    Set dvar5a = "L3,Label,\"FSD Jump\",10,+40,80,20,\"\""
    Set dvar5b = "CBF,CheckBox,\"System Info on first jump only\",100,+0,200,20,\"Say system information on first jump to system only\",%IsPresent(SpeechControls,\"FirstJumpOnly;\",0)"
    Set dvar5c = "CBFL,CheckBox,\"Disable fuel level reports\",300,+0,200,20,\"Disable Fuel Level Reports\",%IsPresent(SpeechControls,\"FuelLevelDisable;\",0)"
    Set dvar5d = "CBFR,CheckBox,\"Disable faction reports\",-200,+30,200,20,\"Disable Faction reporting on FSD jumps\",%IsPresent(SpeechControls,\"FSDFactionDisable;\",0)"

    Set dvar6a = "L3,Label,\"Scan\",10,+40,80,20,\"\""
    Set dvar6b = "CBSM,CheckBox,\"Disable Star Mass/Mag\",100,+0,200,20,\"Disable Scan reports of stars mass and mag\",%IsPresent(SpeechControls,\"ScanStarMassDisable;\",0)"
    Set dvar6c = "CBSH,CheckBox,\"Enable Star HabZone\",300,+0,200,20,\"Enable Scan reports of stars hab zone\",%IsPresent(SpeechControls,\"ScanHabZoneEnable;\",0)"
    Set dvar6d = "CBPB,CheckBox,\"Disable Planet Basic\",100,+30,200,20,\"Disable Scan reports of planets basic info\",%IsPresent(SpeechControls,\"ScanPlanetBasicInformationDisable;\",0)"
    Set dvar6e = "CBPF,CheckBox,\"Enable Planet Extended\",300,+0,200,20,\"Enable Scan reports of planets extended info\",%IsPresent(SpeechControls,\"ScanPlanetExtendedInformationEnable;\",0)"
    Set dvar6f = "CBPM,CheckBox,\"Enable Planet Materials\",100,+30,200,20,\"Enable Scan reports of planets materials info\",%IsPresent(SpeechControls,\"ScanPlanetMaterialInformationEnable;\",0)"

    Set dvar7a = "L3,Label,\"EDSM\",10,+40,80,20,\"\""
    Set dvar7b = "CBED,CheckBox,\"Disable EDSM info\",100,+0,200,20,\"Disable all EDSM lookup of system info\",%IsPresent(SpeechControls,\"EDSMInformationDisable;\",0)"
    Set dvar7c = "CBES,CheckBox,\"Short Summary\",300,+0,200,20,\"Produce a short summary instead of the full info\",%IsPresent(SpeechControls,\";EDSMSummaryEnable\",0)"
    Set dvar7d = "CBEM,CheckBox,\"Moon information\",100,+30,200,20,\"Say moon information\",%IsPresent(SpeechControls,\";EDSMMoonsEnable\",0)"
    Set dvar7e = "CBESM,CheckBox,\"Sub moon information\",300,+0,200,20,\"Say sub moon information\",%IsPresent(SpeechControls,\";EDSMSubMoonsEnable\",0)"
    Set dvar7f = "CBEAT,CheckBox,\"Atmosphere information\",100,+30,200,20,\"Say atmosphere information for planets\",%IsPresent(SpeechControls,\";EDSMAtmosphereEnable\",1)"
    Set dvar7g = "CBEVC,CheckBox,\"Volcanism information\",300,+0,200,20,\"Say volcanism information for planets\",%IsPresent(SpeechControls,\";EDSMVolcanismEnable\",1)"
    Set dvar7h = "CBEMA,CheckBox,\"Materials information\",100,+30,200,20,\"Say materials information for planets\",%IsPresent(SpeechControls,\";EDSMMaterialsEnable\",0)"

    Set dvarok = "OK,Button,\"OK\",350,+40,80,20,\"Press for OK\""
    Set dvarcancel = "Cancel,Button,\"Cancel\",250,+0,80,20,\"Press for Cancel\""

    Dialog D1, "Voice Pack Configuration", "460,610", dvar

    While D1 $!= Cancel And D1 $!= Escape
        If D1 $== BBROWSE
            FileDialog savefile,c:,"Log files|*.log|All Files|*.*",*.log,on
            If FileName IsNotEmpty
                DialogControl D1,Set TBLF=%(FileName)

        If D1 $== OK
            Let good = 1

            PersistentGlobal SpeechControls = ""

            // in order
            Call SetSO(ctrl="CBPR",flag="LogTimeDate;")
            Call SetSO(ctrl="CBLL",flag="LogLastOnly;")
            Call SetSO(ctrl="CBD",flag="PrintOnly;")

            Call SetSO(ctrl="CBFR",flag="FriendsStatusDisable;")

            Call SetSO(ctrl="CBN",flag="NPCChatterDisable;")
            Call SetSO(ctrl="CBNMV",flag="NPCVoicesEnable;")

            Call SetSO(ctrl="CBF",flag="FirstJumpOnly;")
            Call SetSO(ctrl="CBFL",flag="FuelLevelDisable;")
            Call SetSO(ctrl="CBFR",flag="FSDFactionDisable;")

            Call SetSO(ctrl="CBSM",flag="ScanStarMassDisable;")
            Call SetSO(ctrl="CBSH",flag="ScanHabZoneEnable;")
            Call SetSO(ctrl="CBPB",flag="ScanPlanetBasicInformationDisable;")
            Call SetSO(ctrl="CBPF",flag="ScanPlanetExtendedInformationEnable;")
            Call SetSO(ctrl="CBPM",flag="ScanPlanetMaterialInformationEnable;")

            Call SetSO(ctrl="CBED",flag="EDSMInformationDisable;")
            Call SetSO(ctrl="CBES",flag="EDSMSummaryEnable;")
            Call SetSO(ctrl="CBEM",flag="EDSMMoonsEnable;")
            Call SetSO(ctrl="CBESM",flag="EDSMSubMoonsEnable;")
            Call SetSO(ctrl="CBEAT",flag="EDSMAtmosphereEnable;")
            Call SetSO(ctrl="CBEVC",flag="EDSMVolcanismEnable;")
            Call SetSO(ctrl="CBEMA",flag="EDSMMaterialsEnable;")

            // print %(SpeechControls)

            DialogControl D1,Get TBSTAR
            PersistentGlobal SpeechEDSMStarExclusion = %(DialogResult)

            DialogControl D1,Get TBLF
            If DialogResult IsNotEmpty And good IsTrue
                If %fileexists(DialogResult) IsTrue
                    PersistentGlobal SpeechLog = %(DialogResult)
                Else
                    Let success = "%openfile(h1,DialogResult,create)"
                    If success IsTrue
                        Print test write to %(DialogResult)
                        Expr %writeline(h1,"Speech output file")
                        Expr %closefile(h1)
                        PersistentGlobal SpeechLog = %(DialogResult)
                    Else
                        MessageBox "Speech Log path not valid","Incorrect filename given"
                        Let good = 0
            Else
                PersistentGlobal SpeechLog = ""

            If good IsTrue
                Break

        DialogControl D1,Continue

    DialogControl D1, Close

END PROGRAM

//*************************************************************
// SetSO
//*************************************************************
PROGRAM SetSO

DialogControl D1,Get %(ctrl)
If DialogResult IsTrue
    PersistentGlobal SpeechControls += %(flag)

END PROGRAM

//*************************************************************
// GenericResponse
// Events: ApproachSettlement, Bounty, BuyAmmo, BuyDrones, BuyExplorationData, BuyTradeData, CapShipBond,
// Events: CockpitBreached(Volume=100), CollectCargo, CommunityGoalDiscard, CommunityGoalJoin,
// Events: CommunityGoalReward, CrewAssign, CrewFire, CrewHire, DatalinkScan, DatalinkVoucher, DataScanned,
// Events: Died, Docked, DockFighter, DockingCancelled, DockingRequested, DockingTimeout, DockSRV, EjectCargo,
// Events: EngineerApply, EngineerCraft, EngineerProgress, EscapeInterdiction, FactionKillBond,
// Events: FetchRemoteModule, FuelScoop(Priority=Low), HeatDamage, HeatWarning, Interdicted, JetConeBoost,
// Events: JetConeDamage, LaunchFighter, LaunchSRV, Liftoff, MarketBuy, MassModuleStore, MaterialCollected,
// Events: MaterialDiscarded, MaterialDiscovered, MiningRefined, MissionAbandoned, MissionAccepted,
// Events: MissionCompleted, MissionFailed, ModuleBuy, ModuleRetrieve, ModuleSell, ModuleSellRemote,
// Events: ModuleStore, ModuleSwap, PayFines, PayLegacyFines, PowerplayCollect, PowerplayDefect,
// Events: PowerplayDeliver, PowerplayFastTrack, PowerplayJoin, PowerplayLeave, PowerplaySalary,
// Events: PowerplayVote, PowerplayVoucher, Promotion, PVPKill, RebootRepair, RedeemVoucher, RefuelAll,
// Events: RefuelPartial, Repair, RepairAll, RestockVehicle, Resurrect, ScientificResearch, Screenshot,
// Events: SelfDestruct, SellDrones, SendText, ShipyardBuy, ShipyardNew, ShipyardSell, ShipyardSwap,
// Events: ShipyardTransfer, SupercruiseEntry, SupercruiseExit, Synthesis, Touchdown, Undocked, USSDrop,
// Events: VehicleSwitch, WingAdd, WingJoin, WingLeave, WingInvite,
// Events: onTimer?(TimerName Contains VoicePackGenericDelay), Scanned, StartJump, SetUserShipName,
// Events: CrewMemberJoins, CrewMemberQuits, JoinACrew, KickCrewMember, ChangeCrewRole, QuitACrew
//*************************************************************
PROGRAM GenericResponse

Set v = say_%(EventClass_EventTypeStr)                          // make up variable name from event name
Set prior = "%existsdefault(Priority,\"Normal\")"               // pick up config variables
Set speech = "%phrase(\"%indirect(v)\")"                        // now expand any phrases in it

If HighVolume NotPresent
    Set HighVolume = 0

Call speak(speech="%(speech)",HighVolume="%(HighVolume)",Priority="%(prior)")

END PROGRAM

//*************************************************************
// GenericDelayedResponse
// Events: DockingDenied(Delay=10000), DockingGranted(Delay=10000)
//*************************************************************
PROGRAM GenericDelayedResponse

Timer VoicePackGenericDelay%(EventClass_EventTypeStr),%(Delay),%(EventJID)

END PROGRAM

//*************************************************************
// speak
//*************************************************************
PROGRAM speak

Rem speech always, optional: Volume, Priority, FinishEvent, Wait, Voice, PitchShift, PrefixSound, PostfixSound, MixSound, Rate

Set speech = "%replacevar(speech,\"say_tx\")"

Set ds = 0
If SpeechControls IsPresent And SpeechControls Contains PrintOnly;
    Set ds = 1

// Print SAY: %(speech)

Say %(speech), Literal=1, Voice="%existsdefault(Voice,\"\")", Volume="%existsdefault(Volume,\"-999\")", Priority="%existsdefault(Priority,\"Normal\")", DontSpeak="%(ds)", FinishEvent="%existsdefault(FinishEvent,\"\")" , Wait="%existsdefault(Wait,\"0\")" , PitchShift ="%existsdefault(PitchShift,\"100\")" , PrefixSound ="%existsdefault(PrefixSound,\"\")" , PostfixSound ="%existsdefault(PostfixSound,\"\")" , MixSound ="%existsdefault(MixSound,\"\")" , Rate ="%existsdefault(Rate,\"-999\")"

If SpeechLog IsPresent And SpeechLog IsNotEmpty
    If SpeechControls IsPresent And SpeechControls Contains LogLastOnly;
        Let success = "%openfile(h1,SpeechLog,create)"
    Else
        Let success = "%openfile(h1,SpeechLog,append)"

    If success IsTrue
        If SpeechControls IsPresent And SpeechControls Contains LogTimeDate;
            Expr %write(h1,"%datetimenow(local):")

        Expr %writeline(h1,speech)
        Expr %closefile(h1)
    Else
        Print Cannot write to speech log file '%(SpeechLog)'

END PROGRAM

