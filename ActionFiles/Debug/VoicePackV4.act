ACTIONFILE V4

ENABLED True

INSTALL LongDescription="This is the fourth edition of the voice pack for EDD, for version 8.1+\r\n***This will disable all previous voice packs***\r\n\r\nIt vocalises most events which are received, and welcomes you at the start and exit of the program. \nCertain events are not vocalised if they don't contain any information relevant to the user or if they only appear on start up.\r\n\r\nSpeech control and voice selection can be accomplished through the menu option in Add-Ons.\r\n\r\nThe ED Discovery team hope you enjoy this feature.\r\n\r\nMore voices can be purchased online.  Ivona voices which are commonly used since they are compatible with SAPI 5 interface can be purchased from www.textaloud.com individually.  Voices must be SAPI 5 compatible to be used with EDDiscovery."
INSTALL ShortDescription="Voice file for ED"
INSTALL Version=4.0.0.0
INSTALL MinEDVersion=8.1.0.0
INSTALL Location=Actions
INSTALL DisableOther1=VoicePackV1
INSTALL DisableOther2=VoicePackV2
INSTALL DisableOther3=VoicePackV3

EVENT ApproachSettlement, GenericResponse, "", Condition AlwaysTrue
EVENT Bounty, GenericResponse, "", Condition AlwaysTrue
EVENT BuyAmmo, GenericResponse, "", Condition AlwaysTrue
EVENT BuyDrones, GenericResponse, "", Condition AlwaysTrue
EVENT BuyExplorationData, GenericResponse, "", Condition AlwaysTrue
EVENT BuyTradeData, GenericResponse, "", Condition AlwaysTrue
EVENT CapShipBond, GenericResponse, "", Condition AlwaysTrue
EVENT CockpitBreached, GenericResponse, Volume=100, Condition AlwaysTrue
EVENT CollectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT CommitCrime, CommitCrime, "", Condition AlwaysTrue
EVENT CommunityGoalDiscard, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalJoin, GenericResponse, "", Condition AlwaysTrue
EVENT CommunityGoalReward, GenericResponse, "", Condition AlwaysTrue
EVENT CrewAssign, GenericResponse, "", Condition AlwaysTrue
EVENT CrewFire, GenericResponse, "", Condition AlwaysTrue
EVENT CrewHire, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkScan, GenericResponse, "", Condition AlwaysTrue
EVENT DatalinkVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT DataScanned, GenericResponse, "", Condition AlwaysTrue
EVENT Died, GenericResponse, "", Condition AlwaysTrue
EVENT Docked, GenericResponse, "", Condition AlwaysTrue
EVENT DockFighter, GenericResponse, "", Condition AlwaysTrue
EVENT DockingCancelled, GenericResponse, "", Condition AlwaysTrue
EVENT DockingDenied, GenericDelayedResponse, Delay=10000, Condition AlwaysTrue
EVENT DockingGranted, GenericDelayedResponse, Delay=10000, Condition AlwaysTrue
EVENT DockingRequested, GenericResponse, "", Condition AlwaysTrue
EVENT DockingTimeout, GenericResponse, "", Condition AlwaysTrue
EVENT DockSRV, GenericResponse, "", Condition AlwaysTrue
EVENT EjectCargo, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerApply, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerCraft, GenericResponse, "", Condition AlwaysTrue
EVENT EngineerProgress, GenericResponse, "", Condition AlwaysTrue
EVENT EscapeInterdiction, GenericResponse, "", Condition AlwaysTrue
EVENT FactionKillBond, GenericResponse, "", Condition AlwaysTrue
EVENT FSDJump, FSDResponse, "", Condition AlwaysTrue
EVENT FetchRemoteModule, GenericResponse, "", Condition AlwaysTrue
EVENT FuelScoop, GenericResponse, Priority=Low, Condition AlwaysTrue
EVENT Friends, Friends, "", Condition AlwaysTrue
EVENT HeatDamage, GenericResponse, "", Condition AlwaysTrue
EVENT HeatWarning, GenericResponse, "", Condition AlwaysTrue
EVENT HullDamage, HullDamage, "", Condition AlwaysTrue
EVENT Interdicted, GenericResponse, "", Condition AlwaysTrue
EVENT Interdiction, Interdiction, "", Condition AlwaysTrue
EVENT JetConeBoost, GenericResponse, "", Condition AlwaysTrue
EVENT JetConeDamage, GenericResponse, "", Condition AlwaysTrue
EVENT LaunchFighter, GenericResponse, "", Condition AlwaysTrue
EVENT LaunchSRV, GenericResponse, "", Condition AlwaysTrue
EVENT Liftoff, GenericResponse, "", Condition AlwaysTrue
EVENT MarketBuy, GenericResponse, "", Condition AlwaysTrue
EVENT MarketSell, MarketSell, "", Condition AlwaysTrue
EVENT MassModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialCollected, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscarded, GenericResponse, "", Condition AlwaysTrue
EVENT MaterialDiscovered, GenericResponse, "", Condition AlwaysTrue
EVENT MiningRefined, GenericResponse, "", Condition AlwaysTrue
EVENT MissionAbandoned, GenericResponse, "", Condition AlwaysTrue
EVENT MissionAccepted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionCompleted, GenericResponse, "", Condition AlwaysTrue
EVENT MissionFailed, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleRetrieve, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSell, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSellRemote, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleStore, GenericResponse, "", Condition AlwaysTrue
EVENT ModuleSwap, GenericResponse, "", Condition AlwaysTrue
EVENT onRefreshEnd, onRefreshEnd, "", Condition AlwaysTrue
EVENT onStartup, onStartup, "", Condition AlwaysTrue
EVENT PayFines, GenericResponse, "", Condition AlwaysTrue
EVENT PayLegacyFines, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayCollect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDefect, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayDeliver, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayFastTrack, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayJoin, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayLeave, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplaySalary, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVote, GenericResponse, "", Condition AlwaysTrue
EVENT PowerplayVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT Promotion, GenericResponse, "", Condition AlwaysTrue
EVENT PVPKill, GenericResponse, "", Condition AlwaysTrue
EVENT RebootRepair, GenericResponse, "", Condition AlwaysTrue
EVENT ReceiveText, ReceiveText, "", Condition AlwaysTrue
EVENT RedeemVoucher, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelAll, GenericResponse, "", Condition AlwaysTrue
EVENT RefuelPartial, GenericResponse, "", Condition AlwaysTrue
EVENT Repair, GenericResponse, "", Condition AlwaysTrue
EVENT RepairAll, GenericResponse, "", Condition AlwaysTrue
EVENT RestockVehicle, GenericResponse, "", Condition AlwaysTrue
EVENT Resurrect, GenericResponse, "", Condition AlwaysTrue
EVENT Scan, Scan, "", Condition AlwaysTrue
EVENT ScientificResearch, GenericResponse, "", Condition AlwaysTrue
EVENT Screenshot, GenericResponse, "", Condition AlwaysTrue
EVENT SelfDestruct, GenericResponse, "", Condition AlwaysTrue
EVENT SellDrones, GenericResponse, "", Condition AlwaysTrue
EVENT SellExplorationData, SellExplorationData, "", Condition AlwaysTrue
EVENT SendText, GenericResponse, "", Condition AlwaysTrue
EVENT ShieldState, ShieldState, "", Condition AlwaysTrue
EVENT ShipyardBuy, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardNew, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSell, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardSwap, GenericResponse, "", Condition AlwaysTrue
EVENT ShipyardTransfer, GenericResponse, "", Condition AlwaysTrue
EVENT SupercruiseEntry, GenericResponse, "", Condition AlwaysTrue
EVENT SupercruiseExit, GenericResponse, "", Condition AlwaysTrue
EVENT Synthesis, GenericResponse, "", Condition AlwaysTrue
EVENT Touchdown, GenericResponse, "", Condition AlwaysTrue
EVENT Undocked, GenericResponse, "", Condition AlwaysTrue
EVENT USSDrop, GenericResponse, "", Condition AlwaysTrue
EVENT VehicleSwitch, GenericResponse, "", Condition AlwaysTrue
EVENT WingAdd, GenericResponse, "", Condition AlwaysTrue
EVENT WingJoin, GenericResponse, "", Condition AlwaysTrue
EVENT WingLeave, GenericResponse, "", Condition AlwaysTrue
EVENT WingInvite, GenericResponse, "", Condition AlwaysTrue
EVENT onShutdown, onShutdown, "", Condition AlwaysTrue
EVENT onInstall, onInstall, "", Condition AlwaysTrue
EVENT onSayFinished, SaySystemInfo, "", EventName $== FSD
EVENT onTimer, SaySystemInfo, "", TimerName $== ScanDelay
EVENT onMenuItem, Menus, "", MenuName Contains VoiceMenu
EVENT onTimer, GenericResponse, "", TimerName Contains VoicePackGenericDelay
EVENT Scanned, GenericResponse, "", Condition AlwaysTrue
EVENT StartJump, GenericResponse, "", Condition AlwaysTrue
EVENT SetUserShipName, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberJoins, GenericResponse, "", Condition AlwaysTrue
EVENT CrewMemberQuits, GenericResponse, "", Condition AlwaysTrue
EVENT JoinACrew, GenericResponse, "", Condition AlwaysTrue
EVENT KickCrewMember, GenericResponse, "", Condition AlwaysTrue
EVENT ChangeCrewRole, GenericResponse, "", Condition AlwaysTrue
EVENT QuitACrew, GenericResponse, "", Condition AlwaysTrue

//*************************************************************
// SetUpLanguageEnglish
//*************************************************************
PROGRAM SetUpLanguageEnglish

Global say_welcome $= "This is Elite Dangerous Discovery, Voice Pack 4"
Global say_install $= "You have installed Elite Dangerous Discovery, Voice Pack 4, English version"
Global say_shutdown $= "Bye Bye Commander, till next time;Elite Dangerous Discovery closing;Fly safe commander; Salutations Commander"
Global say_refresh $= "Welcome %existsdefault(RK_Class_Combat,\"\") Commander %(Commander), %ifcontains(LAST_ShipType,\"SRV\",\"driving\",\"flying\") a %(LAST_ShipType) with %(LED_Credits) credits"

Global say_ApproachSettlement $= "Approaching %(EventClass_Name);Settlement %(EventClass_Name) approaching"

Global say_Bounty $= "Bounty for that ship is %(EventClass_TotalReward) credits, faction was %rs(EventClass_VictimFaction,say_ss)"
Global say_BuyAmmo $= "Ammunition bought, %(EventClass_Cost) credits;That cost %(EventClass_Cost) credits"
Global say_BuyExplorationData $= "Bought map of star system %rs(EventClass_System,say_ss) for %(EventClass_Cost) credits"
Global say_BuyDrones $= "Bought %(EventClass_Count) %(EventClass_Type) at a total cost of %(EventClass_TotalCost) credits"
Global say_BuyTradeData $= "Bought trade data for system %rs(EventClass_System,say_ss), cost %(EventClass_Cost) credits"

Global say_CapShipBond $= "Reward for capital ship combat from faction %rs(EventClass_AwardingFaction,say_ss) against %rs(EventClass_VictimFaction,say_ss), %(EventClass_Reward) credits"
Global say_CockpitBreached $= "Alert, Alert, Cockpit breached. Head for station now;Emergency, loss of Cockpit Canopy, abort;Emergency, Cockpit Canopy is breached"
Global say_CollectCargo $= "{Picked up;Collected;Scooped up} %(EventClass_FriendlyType) %iftrue(EventClass_Stolen,\", Warning commander, this cargo is stolen\")"
Global say_CommitCrimeFine $= "Fine committed commander, %sc(EventClass_CrimeType) on %rs(EventClass_Faction,say_ss), cost %(EventClass_Fine) credits"
Global say_CommitCrimeBounty $= "Crime committed commander, %sc(EventClass_CrimeType) on %rs(EventClass_Faction,say_ss), bounty on you is %(EventClass_Bounty) credits"
Global say_CommunityGoalJoin $= "Joining the community goal %sc(EventClass_Name), located at system %rs(EventClass_System,say_ss)"
Global say_CommunityGoalReward $= "Community goal %sc(EventClass_Name), located at system %rs(EventClass_System,say_ss), rewarded you with %(EventClass_Reward) credits"
Global say_CommunityGoalDiscard $= "Opting out of community goal %sc(EventClass_Name), located at system %rs(EventClass_System,say_ss)"
Global say_CrewAssign $= "Crew member %(EventClass_Name), %ifequal(EventClass_Role,\"Active\",\" reporting for duty\",\" placed on %(EventClass_Role)\")"
Global say_CrewFire $= "{Crew member %(EventClass_Name) }fired;dismissed;is paid off, goodbye sucker"
Global say_CrewHire $= "{Hired new crew member %(EventClass_Name)%ifnotempty(EventClass_Faction,\", of faction %rs(EventClass_Faction,say_ss)\"), rank %(EventClass_CombatRank), costing %(EventClass_Cost) credits.} Welcome to the team; Welcome onboard"

Global say_ChangeCrewRole $= "Crew role changed to %(EventClass_Role);Swapped control to %(EventClass_Role)"
Global say_CrewMemberJoins $= "Crew member %(EventClass_Crew) joins us on the %(EventShip_ShortName), Welcome Commander;Welcome Commander %(EventClass_Crew) to our ship"
Global say_CrewMemberQuits $= "Crew member %(EventClass_Crew) quits;Commander %(EventClass_Crew) left"
Global say_JoinACrew $= "Joining commander %(EventClass_Captain) as crew member;Signing on for service with %(EventClass_Captain)"
Global say_QuitACrew $= "Leaving commander %(EventClass_Captain) ship;Resigning my commission, commander %(EventClass_Captain)"
Global say_KickCrewMember $= "Kicking %(EventClass_Crew);Removed crew %(EventClass_Crew);%(EventClass_Crew) is removed from the ship"

Global say_DatalinkVoucher $= "{Scanned datalink;Downloaded datalink}{, voucher received is worth;, that's worth} %(EventClass_Reward) credits from %rs(EventClass_PayeeFaction,say_ss)"
Global say_DatalinkScan $= "Scanned data link, %(EventClass_Type)"
Global say_DataScanned $= "Scanned %sc(EventClass_Type)"
Global say_Died $= "Here lies the bones of commander %(Commander), dead and buried; Your dead and buried commander %(Commander);I'll send for the under taker commander %(Commander);Ashes to ashes, dust to dust, your toast Commander %(Commander)"
Global say_Docked $= "{Docked at %(EventClass_StationName), %ifnotempty(EventClass_StationType,\"%(EventClass_StationType) type\")}{. }{This is a %(EventClass_Economy_Localised) station;Station economy is %(EventClass_Economy_Localised)}"
Global say_DockSRV $= "Surface Recon Vehicle back on board Commander;Boarded mothership Commander, prepare for flight operations;Entering mothership"
Global say_DockingDenied $= "Appears busy commander, confirming %(EventClass_StationName) has denied docking;Docking was denied at %(EventClass_StationName)"
Global say_DockingGranted $= "Commander, confirmed for landing pad %(EventClass_LandingPad);Confirmed landing on pad %(EventClass_LandingPad); Landing pad %(EventClass_LandingPad) is ready for landing"
Global say_DockingRequested $= "Sent docking request;Requested docking"
Global say_DockingTimeout $= "Too late commander, permission has been withdrawn to dock;Took to long commander, permission to dock withdrawn"
Global say_DockingCancelled $= "Docking cancelled;Cancelled docking request"
Global say_DockFighter $= "Fighter docked with mothership Commander;Fighter back on board;Fighter docked succesfully, Commander;Fighter retrieved"

Global say_edsmscannoinfo $= "No other information on system.;Ship computer has no other information on this system;Lookup of Wiki Pedia has failed! I can't find anything on this system; Google search on this system indicates no information available;System information unavailable"
Global say_edsmscanstarsplanets $= "Total of %(totalstars) %ifne(totalstars,\"1\",\"stars\",\"star\") and %(totalplanets) %ifne(totalplanets,\"1\",\"planets\",\"planet\") in this system"

Global say_edsmscanstarinfo $= "%(type) %rs(name,say_ss), Type %(startype), Mass %roundnz(mass,1,0.#,4) Sols, %ifnonzero(planets,\" %(planets) planets\"). "
Global say_edsmscanstarnoinfo $= "No information on %(type) %rs(ownname,say_ss), %ifnonzero(planets,\" %(planets) planets\"). "
Global say_edsmscanstarbarycentre $= "Barycentre %rs(ownname,say_ss), %ifnonzero(planets,\" %(planets) planets\"). "

Global say_edsmscanbodystarinfo $= "%rs(pname,say_ss), %sc(stype), mass %roundnz(mass,1,0.#,4) Sols. "
Global say_edsmscanbodyinfo $= "%rs(pname,say_ss), %(terraform)%(class)%ifnotcontains(landable,\"Not \",\", Landable\")"
Global say_edsmscanbodyinfoAtmos $= "%ifnotempty(atmos,\", %(atmos)\")%ifnotcontains(atmos,\"atmosphere\",\" atmosphere \",\"\",\"\")"
Global say_edsmscanbodyinfoVolcanism $= "%ifnotempty(volcanism, \", %(volcanism)\")"
Global say_edsmscanbodyinfoMat $= ", Materials detected "
Global say_edsmscanbodynoinfo $= "No information on %(ownname). "

Global say_EjectCargo $= "%iftrue(EventClass_Abandoned,\"Abandon\",\"Eject\") %(EventClass_Count) units of %(EventClass_FriendlyType) to space;Ejected %(EventClass_FriendlyType);Dumped %(EventClass_FriendlyType)"

Global say_FetchRemoteModule $= "Module %sc(EventClass_StoredItemLocalised) being retrieved, cost %(EventClass_TransferCost) credits"
Global say_FactionKillBond $= "Reward for combat from faction %rs(EventClass_AwardingFaction,say_ss) against %rs(EventClass_VictimFaction,say_ss), %(EventClass_Reward) credits"

Global say_Friends $= "%ifEqual(EventClass_Status,\"Offline\",\"Friend \")%ifEqual(EventClass_Status,\"Online\",\"Friend \")%(EventClass_Name) %ReplaceVar(EventClass_Status,say_friendsub)"
Global say_friendsub1 $= "Added;has been added as a friend"
Global say_friendsub2 $= "Requested;requests to be added as a friend"
Global say_friendsub3 $= "Online;is online"
Global say_friendsub4 $= "Offline;is offline"
Global say_friendsub5 $= "Declined;has declined your friendship"

Global say_EngineerProgressRank $= "Congratulations, you've made rank %(EventClass_Rank), with Engineer %(EventClass_Engineer)"
Global say_EngineerProgressState $= "Engineer %(EventClass_Engineer) has set your state to %(EventClass_Progress)"
Global say_EngineerProgress $= "%ifnotempty(EventClass_Progress,say_EngineerProgressState,say_EngineerProgressRank)"

Global say_EngineerApply $= "Applied blueprint %sc(EventClass_Blueprint) to ship, from Engineer %(EventClass_Engineer).  This is a level %(EventClass_Level) effect. %ifnotempty(EventClass_Override,\"%(EventClass_Override) was applied\") "
Global say_EngineerCraft $= "Crafted blueprint %sc(EventClass_Blueprint), from Engineer %(EventClass_Engineer).  This is a level %(EventClass_Level) effect. Ready to apply "

Global say_EscapeInterdiction $= "Evaded interdiction by %iftrue(EventClass_IsPlayer,say_EscapeInterdictionPlayer)%iffalse(EventClass_IsPlayer,say_EscapeInterdictionNPC)"
Global say_EscapeInterdictionPlayer $= "Commander %(EventClass_Interdictor)"
Global say_EscapeInterdictionNPC $= "N P C %(EventClass_Interdictor)"

Global say_FuelScoop $= "{Refueled;Scooped}{ %round(EventClass_Scooped,2,0.##) tons of fuel, }{leaving level at;fuel level is now} %round(EventClass_Total,2,0.##) tons"

Global say_FSDJump $= "Arrived at %rs(EventClass_StarSystem,say_ss), %(visit)%ifnonzero(EventEDDBPopulation,\"Populated, \") jump distance %round(EventClass_JumpDist,1,0.0) light years"
Global say_FSDJumpVisit $= "First visit, ;Second visit, ;Third Visit, ;Fourth visit, ;Fifth visit, ;Sixth Visit,;"
Global say_FSDJumpFuel $= ", Fuel used %round(EventClass_FuelUsed,1,0.0) tons, Fuel left %round(EventClass_FuelLevel,1,0.0) tons"
Global say_FSDJumpFaction $= ", System controlled by %rs(EventClass_Faction,say_ss) %ifnotempty(EventClass_FactionState,\"in state %(EventClass_FactionState)\")"
Global say_FSDJumpFuelWarning $= "Alert commander, fuel level is low;Fuel level is low;Warning, running low on gas here"

Global say_HullDamageCritical $= "Alert, Alert, Damage is critical at %(health) %"
Global say_HullDamage $= "{Warning Commander, ;Commander, Alert, }Hull Damage is at %(health) %"
Global say_HeatWarning $= "Warning Commander, gaining heat;Its hot in here, watch out;Heating up Commander"
Global say_HeatDamage $= "Warning Commander, damage from heat sustained;Heat damage sustained;Ship damaged from over heating"

Global say_InterdictionSuccess $= "%iftrue(EventClass_IsPlayer,say_InterdictionSuccessPlayer) %iffalse(EventClass_IsPlayer,say_InterdictionSuccessNPC)"
Global say_InterdictionSuccessPlayer $= "Interdicted Human %(EventClass_CombatRank) Commander %(EventClass_Interdicted)"
Global say_InterdictionSuccessNPC $= "Interdicted N P C %(EventClass_Interdicted) %ifnotempty(EventClass_Faction,say_InterdictedFaction)"
Global say_InterdictionFailure $= "%iftrue(EventClass_IsPlayer,say_InterdictionFailurePlayer) %iffalse(EventClass_IsPlayer,say_InterdictionFailureNPC)"
Global say_InterdictionFailurePlayer $= "Failed to interdict Human %(EventClass_CombatRank) Commander %(EventClass_Interdicted)"
Global say_InterdictionFailureNPC $= "Failed to inderdict N P C %(EventClass_Interdicted) %ifnotempty(EventClass_Faction,say_InterdictedFaction)"

Global say_Interdicted $= "%iftrue(EventClass_IsPlayer,say_InterdictedPlayer) %iffalse(EventClass_IsPlayer,say_InterdictedNPC)"
Global say_InterdictedPlayer $= "Human Commander Alert!, %iftrue(EventClass_Submitted,say_InterdictedSubmitted) interdiction by %(EventClass_CombatRank) Commander %(EventClass_Interdictor)"
Global say_InterdictedNPC $= "N P C Alert!, %iftrue(EventClass_Submitted,say_InterdictedSubmitted) interdiction by %(EventClass_Interdictor), %ifnotempty(EventClass_Faction,say_InterdictedFaction)"
Global say_InterdictedFaction $= "of faction %rs(EventClass_Faction,say_ss)"
Global say_InterdictedSubmitted $= "Submitted to"

Global say_JetConeBoost $= "Frame Shift Drive super charged by %round(EventClass_BoostValue,2,0.##) times; Drive boosted by %round(EventClass_BoostValue,2,0.##) times"
Global say_JetConeDamage $= "{Alert Commander, neutron star jet cone has damaged module %(EventClass_ModuleLocalised), }Take immediate evasive manoeuvre; Escape from cone immediately;Emergency escape now"

Global say_Liftoff $= "Liftoff from planet;Ship is free of surface;Launch!;Takeoff sequence in progress Commander"
Global say_LaunchSRV $= "Launch Surface Recon Vehicle with %(EventClass_Loadout) loadout."
Global say_LaunchFighter $= "{Fighter is launching commander;Deploying fighter}, %iftrue(EventClass_PlayerControlled,\" prepare to take controls\", \" crew member is taking command\") "

Global say_MaterialCollected $= "Collected %(EventClass_Count) items of material %(EventClass_FriendlyName)"
Global say_MaterialDiscarded $= "Discarded material %(EventClass_FriendlyName) %(EventClass_Count) items"
Global say_MaterialDiscovered $= "Discovered new material %(EventClass_FriendlyName)"
Global say_MarketBuy $= "Bought %(EventClass_Count) units of %(EventClass_FriendlyType), Buy price is %(EventClass_BuyPrice) credits, total cost is %(EventClass_TotalCost) credits"
Global say_MarketSell $= "Sold %(EventClass_Count) units of %(EventClass_FriendlyType), Sell price is %(EventClass_SellPrice) credits, total sale is %(EventClass_TotalSale) credits, you made %(profit) credits"
Global say_MiningRefined $= "Refined %(EventClass_FriendlyType);%(EventClass_FriendlyType) Refined"

Global say_MissionAbandoned $= "%sc(EventClass_Name) has been abandoned;Abandoned mission %sc(EventClass_Name);Aborted mission %sc(EventClass_Name)"
Global say_MissionAccepted $= "%sc(EventClass_Name) accepted %ifnotempty(EventClass_Faction,\"from faction %rs(EventClass_Faction,say_ss),\")"
Global say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationSystem,\" Mission destination is %rs(EventClass_DestinationSystem,say_ss),\")"
Global say_MissionAccepted $+= "%ifnotempty(EventClass_DestinationStation,\" station %(EventClass_DestinationStation),\")"
Global say_MissionAccepted $+= "%ifnotempty(EventClass_Target,\" target is %(EventClass_Target),\")"
Global say_MissionAccepted $+= "%ifnotempty(EventClass_TargetFaction,\"of %rs(EventClass_TargetFaction,say_ss) faction,\")"
Global say_MissionAccepted $+= "%ifnotempty(EventClass_PassengerType,\"taking %(EventClass_PassengerCount) passengers of type %(EventClass_PassengerType).\")"
Global say_MissionAccepted $+= "%ifnotempty(EventClass_Expiry,\" This mission expires on %date(EventClass_Expiry,longdatetime),\")"

Global say_MissionCompleted $= "{Congratulations, ;Well done Commander, }%sc(EventClass_Name) completed %ifnotempty(EventClass_Faction,\"from faction %rs(EventClass_Faction,say_ss),\")"
Global say_MissionCompleted $+= "%ifnotempty(EventClass_Target,\" target was %(EventClass_Target),\")"
Global say_MissionCompleted $+= "%ifnotempty(EventClass_TargetFaction,\"of %rs(EventClass_TargetFaction,say_ss) faction,\")"
Global say_MissionCompleted $+= "%ifnotempty(EventClass_Reward,\"Reward is %(EventClass_Reward) credits,\")"
Global say_MissionFailed $= "%sc(EventClass_Name) has failed;Failed mission %sc(EventClass_Name)"

Global say_ModuleBuy $= "Module %sc(EventClass_BuyItemLocalised) fitted, cost %(EventClass_BuyPrice) credits, on ship %ship(EventClass_Ship) in %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot)."
Global say_ModuleBuy $+= "%ifnotempty(EventClass_SellItemLocalised,\" Sold Module %(EventClass_SellItemLocalised) for %(EventClass_SellPrice) credits.\")"
Global say_ModuleRetrieve $= "Retrieved module %sc(EventClass_RetrievedItemLocalised) and fitted it to ship %ship(EventClass_Ship) into %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot)."
Global say_ModuleSell $= "Module %sc(EventClass_SellItemLocalised) removed, reimbursement price is %(EventClass_SellPrice) credits, on ship %ship(EventClass_Ship) in %ifnotcontains(EventClass_Slot,\"slot\",\"slot \")%sc(EventClass_Slot)."
Global say_ModuleSellRemote $= "Sold remote module %sc(EventClass_SellItemLocalised), sell price is %(EventClass_SellPrice) credits."
Global say_ModuleStore $= "Module %sc(EventClass_StoredItemLocalised) removed from ship %ship(EventClass_Ship). %ifnotempty(EventClass_Cost,\"Store cost is %(EventClass_Cost) credits\")"
Global say_ModuleSwap $= "Swap modules between %ifnotcontains(EventClass_FromSlot,\"slot\",\"slot \")%sc(EventClass_FromSlot) and %ifnotcontains(EventClass_ToSlot,\"slot\",\"slot \")%sc(EventClass_ToSlot)"
Global say_MassModuleStore $= "Stored multiple modules from ship %ship(EventClass_Ship)."

Global say_PayFines $= "Paid %(EventClass_Amount) credits in fines Commander%ifnonzero(EventClass_BrokerPercentage,\", with a commission to the broker of %(EventClass_BrokerPercentage) percent\")"
Global say_PayLegacyFines $= "Paid %(EventClass_Amount) credits in legacy fines Commander%ifnonzero(EventClass_BrokerPercentage,\", with a commision to the broker of %(EventClass_BrokerPercentage) percent\")"
Global say_Promotion $= "Congratulations, you've been promoted!"
Global say_Promotion $+= "%ifnotempty(EventClass_Combat,\", Combat rank to %sc(EventClass_Combat)\")"
Global say_Promotion $+= "%ifnotempty(EventClass_Trade,\", Trade rank to %sc(EventClass_Trade)\")"
Global say_Promotion $+= "%ifnotempty(EventClass_Explore,\", Explorer rank to %sc(EventClass_Explore)\")"
Global say_Promotion $+= "%ifnotempty(EventClass_Federation,\", Federation rank to %sc(EventClass_Federation)\")"
Global say_Promotion $+= "%ifnotempty(EventClass_Empire,\", Empire rank to %sc(EventClass_Empire)\")"
Global say_PowerplayCollect $= "Collected power play commodities for delivery for %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) items"
Global say_PowerplayDefect $= "Defecting from %(EventClass_FromPower) to %(EventClass_ToPower)"
Global say_PowerplayDeliver $= "Delivering power play commodities for power %(EventClass_Power), %sc(EventClass_Type), %(EventClass_Count) items"
Global say_PowerplayFastTrack $= "Fast track payment to power %(EventClass_Power), cost is %(EventClass_Cost) credits"
Global say_PowerplayJoin $= "Joining %(EventClass_Power), good luck commander"
Global say_PowerplayLeave $= "Leaving %(EventClass_Power)"
Global say_PowerplaySalary $= "Power play salary received from %(EventClass_Power) of %(EventClass_Amount) credits"
Global say_PowerplayVote $= "Voted for power %(EventClass_Power) to take over system %rs(EventClass_System,say_ss), votes are currently %(EventClass_Votes)"
Global say_PowerplayVoucher $= "Reward for Power Play combat from %(EventClass_Power) in systems %expandarray(EventClass_Systems,\", \",0,20,splitcaps)"
Global say_PVPKill $= "Congratulations, that scum %(EventClass_CombatRank) Commander %(EventClass_Victim) is pushing up the weeds now in heaven or hell;%(EventClass_CombatRank) Commander %(EventClass_Victim) despatched to another world"

Global say_RebootRepair $= "Rebooting and repairing modules %expandarray(EventClass_Modules,\", \",0,20,splitcaps)"
Global say_RedeemVoucher $= "Redeeming %(EventClass_Type) worth %(EventClass_Amount) %ifnotempty(EventClass_Faction,\" from faction %sc(EventClass_Faction)\")%ifnonzero(EventClass_BrokerPercentage,\", with a commission to the broker of %(EventClass_BrokerPercentage) percent\")"

Global say_Repair $= "{Repaired %(EventClass_ItemLocalised) Commander;%(EventClass_ItemLocalised) repaired}. Cost is %(EventClass_Cost) credits"

Global say_RepairAll $= "{Damage repaired;Ship fully repaired}{. Cost is %(EventClass_Cost) credits. }Ready for action Commander;Ready to launch"
Global say_RefuelAll $= "{Ship fully refuelled;Refuelled ship}, cost is %(EventClass_Cost) credits, fuel %round(EventClass_Amount,1,0.0) tons"
Global say_RefuelPartial $= "Ship partially refuelled, cost %(EventClass_Cost) credits, fuel %round(EventClass_Amount,1,0.0) tons"
Global say_RestockVehicle $= "Bought %(EventClass_Count) %(EventClass_Type) of type %(EventClass_Loadout), Cost %(EventClass_Cost) credits"
Global say_Resurrect $= "{As if by magic, your alive again Commander %(Commander);Alive again Commander to fight another day}, cost was %(EventClass_Cost) credits"
Global say_ReceiveText $= "Message from %Alt(EventClass_FromLocalised,EventClass_From), %Alt(EventClass_MessageLocalised,EventClass_Message)"

Global say_SellExplorationData $= "Sold %(EventClass_Systems_Length) star systems for %(EventClass_BaseValue) credits."
Global say_SellExplorationDataBonus $= "And discovered %(EventClass_Discovered_Length) bodies for %(EventClass_Bonus) bonus credits"
Global say_SendText $= "Message sent to %Alt(EventClass_To_Localised,EventClass_To)"

Global say_Scanned $= "Warning, %(EventClass_ScanType) scan detected;A Ship is performing a %(EventClass_ScanType) scan on us;%(EventClass_ScanType) scan detected commander"
Global say_ScanStar $= "Scanned Star %rs(EventClass_BodyName,say_ss), %(EventClass_StarTypeText)"
Global say_ScanStarMassMag $= ", %roundnz(EventClass_nStellarMass,1,0.#,4) stellar masses"
Global say_ScanStarMassMag $+= ", Absolute Magnitude %round(EventClass_nAbsoluteMagnitude,1,M0.#)"
Global say_ScanStarInOrbit $= ", orbital period %round(period,1,0.#) days"
Global say_ScanStarHabitableZone $= ", Habitable Zone %round(EventClass_HabitableZoneInner,0,0) to %round(EventClass_HabitableZoneOuter,0,0) light seconds"
Global say_ScanStarAge $= ", Age %round(EventClass_nAge,1,0.#) million years"

Global say_ScanPlanet $= "Scanned %rs(EventClass_BodyName,say_ss), %sc(EventClass_TerraformState) %rs(EventClass_PlanetClass,say_ss)"
Global say_ScanPlanetDistance $= ", Distance from arrival %round(EventClass_DistanceFromArrivalLS,1,#.0) light seconds"
Global say_ScanPlanetLandable $= ", Landable"
Global say_ScanPlanetAtmosphere $= ", %sc(EventClass_Atmosphere)"
Global say_ScanPlanetNoAtmosphere $= ", No Atmosphere"
Global say_ScanPlanetVolcanism $= ", %(EventClass_Volcanism)"
Global say_ScanPlanetTidallyLocked $= ", Tidally locked"
Global say_ScanPlanetRotation $= ", Rotation Period %round(rotation,1,0.#) days"
Global say_ScanPlanetOrbitalPeriod $= ", Orbital Period %round(period,1,0.#) days"
Global say_ScanPlanetMass $= ", Mass %round(EventClass_nMassEM,3,0.###) earth masses"
Global say_ScanPlanetMoonMass $= ", Mass %roundnz(moonmass,2,0.##,4) moon masses"
Global say_ScanPlanetGravity $= ", Gravity %roundnz(gravity,1,0.#,4) gee"
Global say_ScanPlanetTemperature $= ", Temperature %round(EventClass_nSurfaceTemperature,0,0.#) kelvin"
Global say_ScanPlanetPressure $= ", Pressure %roundnz(EventClass_nSurfacePressure,1,0.#,4) Pascal"
Global say_ScanPlanetNoSurfacePressure $= ", No surface pressure"
Global say_ScanPlanetMaterials $= ", Materials detected %ExpandVars(EventClass_Materials_,\", \",0,1000,\"nameonly splitcaps\")"

Global say_Screenshot $= "Screen shot captured of %rs(EventClass_System,say_ss) system, body %(EventClass_Body)"

Global say_SellDrones $= "Sold %(EventClass_Count) %(EventClass_Type) for %(EventClass_TotalSale) credits"
Global say_SelfDestruct $= "Preparing for launch of escape capsule commander, vehicle self destructing"
Global say_ScientificResearch $= "Contributed to scientific research %sc(EventClass_Name), %(EventClass_Count) items, %sc(EventClass_Category) category"

Global say_ShipyardBuy $= "Bought ship %ship(EventClass_ShipType) at %(EventClass_ShipPrice) credits"
Global say_ShipyardBuy $+= "%ifnotempty(EventClass_StoreOldShip,\", Stored ship %ship(EventClass_StoreOldShip) in hangar\")"
Global say_ShipyardBuy $+= "%ifnotempty(EventClass_SellOldShip,\", Sold ship %ship(EventClass_SellOldShip) for %(EventClass_SellPrice) credits\")"
Global say_ShipyardSell $= "Sold ship %ship(EventClass_ShipType) for %(EventClass_ShipPrice) credits%ifnotempty(EventClass_System, \" at system %rs(EventClass_System,say_ss)\")"
Global say_ShipyardNew $= "{Congratulations on }{buying a brand new;your new purchase of a} %(EventClass_ShipType) ship"
Global say_ShipyardSwap $= "Swapped ship %ship(EventClass_StoreOldShip) for a %ship(EventClass_ShipType)"
Global say_ShipyardTransfer $= "Ordered the transfer of ship %ship(EventClass_ShipType) from system %rs(EventClass_System,say_ss) at %round(EventClass_Distance,1,0.0) light years, cost will be %(EventClass_TransferPrice) credits"

Global say_SupercruiseEntry $= "Warp engines on;Supercruise engaged;Frame shift drive engaged;Hold on tight, Supercruising"
Global say_SupercruiseExit $= "{Exiting supercruise;Normal space commander;Warp engines off, Impulse engaged}%ifnotempty(EventClass_BodyType,\", Arrived at %sc(EventClass_BodyType)\")%ifnotempty(EventClass_Body,\", %rs(EventClass_Body,say_ss)\")"

Global say_shieldsdown $= "Alert shields are down, evasive manoeuvres;Shields are down;Danger no shields, run;Don't Panic, but we have no shields!"
Global say_shieldsup $= "Shields restored;Shields back on line commander;Shields operational, Commander"

Global say_SetUserShipName $= "I name this ship of type %(EventClass_Ship), and call it %(EventClass_ShipName) with registration %(EventClass_ShipIdent).  May god bless all who sail the stars in her!"

Global say_StartJump $= "%ifcontains(EventClass_JumpType,\"Hyperspace\",\"%expand(say_StartHyperspace)\",\"%expand(say_StartSupercruise)\")"
Global say_StartHyperspace $= "{Prepare for Hyperspace;Jumping}{ to system %(EventClass_StarSystem), Star is %(EventClass_StarClass) class,}{.;. Hold on tight!;. Warp drive engaging;. Make it So!}"
Global say_StartSupercruise $= "Entering supercruise;Prepare for supercruise"

Global say_Synthesis $= "Synthesis of %sc(EventClass_Name) performed"

Global say_Touchdown $= "{Landing successful commander;Landed commander;Touchdown!}{ at Lattitude %round(EventClass_Latitude,2,M0.##), Longitude %round(EventClass_Longitude,2,M0.##), }Well done commander;Engines off;Prepare for surface operations"

Global say_Undocked $= "Undocked from %sc(EventClass_StationName) fly safe commander;Ship ready, your in control Commander; Engines on, departing %sc(EventClass_StationName);Departing station %sc(EventClass_StationName)"
Global say_USSDrop $= "Dropped into U S S type %(EventClass_USSTypeLocalised), threat level is %(EventClass_USSThreat)"

Global say_VehicleSwitch $= "Switching to %sc(EventClass_To)"

Global say_WingAdd $= "Commander %sc(EventClass_Name) has joined the wing"
Global say_WingJoin $= "Joined wing with Commander %expandarray(EventClass_Others,\", Commander \", 0, 32)"
Global say_WingLeave $= "Leaving wing Commander"
Global say_WingInvite $= "Invited to wing by %(EventClass_Name)"

// WingInvite, Friends, EngineeringCont

Rem subsitution patterns (ss1,ss2 etc) for faction and body name fields
Global say_ss1 $= "-; dash "
Global say_ssn1 $= " I ; 1 "
Global say_ssn2 $= " II ; 2 "
Global say_ssn3 $= " III ; 3 "
Global say_ssn4 $= " IV ; 4 "
Global say_ssn5 $= " V ; 5 "

Rem say subsitution patterns, applied after the phrase has been made, are called say_txN in the same form as above.

Global say_tx1 $= "terraforming; Terra Forming"
Global say_tx2 $= "terraformable; Terra Formable"
Global say_tx3 $= "CMDR ;Commander "

Global SpeechDefinitionFile = SetUpLanguageEnglish
Global SpeechCulture = en-gb

END PROGRAM

//*************************************************************
// onStartup
// Events: onStartup
//*************************************************************
PROGRAM onStartup

Call SetUpLanguage
Set speech = %(say_welcome)

Call speak(speech="%(speech)")

Print Voice Pack installed, running on EDD Version %version(1).%version(2).%version(3).%version(4)
Call Initialise

END PROGRAM

//*************************************************************
// onInstall
// Events: onInstall
//*************************************************************
PROGRAM onInstall

If InstallList Contains VoicePack
    Call SetUpLanguage
    Say %(say_install)
Call Initialise

END PROGRAM

//*************************************************************
// Initialise
//*************************************************************
PROGRAM Initialise

MenuItem VoiceMenuConfigureVoice,add-ons,"Voice Synthesis Configuration",speaker
MenuItem VoiceMenuConfigureVerbosity,add-ons,"Voice Pack Configuration",speaker
MenuItem VoiceMenuConfigureSpeechFile,add-ons,"Edit speech file",missioncompleted
MenuItem VoiceMenuShowHelp,help,"Voice Pack",speaker

END PROGRAM

//*************************************************************
// SetUpLanguage
//*************************************************************
PROGRAM SetUpLanguage

Rem do these.. If %(CurrentCulture) Contains sv
Call SetUpLanguageEnglish

END PROGRAM

//*************************************************************
// onShutdown
// Events: onShutdown
//*************************************************************
PROGRAM onShutdown

Set speech = "%phrase(\"%expand(say_shutdown)\")"
Call speak(speech="%(speech)",Wait=1)

END PROGRAM

//*************************************************************
// onRefreshEnd
// Events: onRefreshEnd
//*************************************************************
PROGRAM onRefreshEnd

If %(RefreshCount) <= 1
    Event PREFIX LAST_ LAST
    Ledger PREFIX LED_ AtOrBefore %(LAST_JID)
    Event PREFIX RK_ LAST Rank
    Set speech = "%phrase(\"%expand(say_refresh)\")"
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// ReceiveText
// Events: ReceiveText
//*************************************************************
PROGRAM ReceiveText

If SpeechOptions IsPresent And SpeechOptions Contains NPCChatterDisable; And EventClass_Channel $== npc
    Rem no NPC chatter
Else 
    Set v = say_%(EventClass_EventTypeStr)                      // make up variable name from event name
    Set speech = "%phrase(\"%indirect(v)\")"                    // now expand any phrases in it
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// HullDamage
// Events: HullDamage
//*************************************************************
PROGRAM HullDamage

Let health100 = %(EventClass_Health)*100,health = "%floor(health100,N0)"
If health > 40
    Set speech = "%phrase(\"%expand(say_HullDamageCritical)\")"
    Call speak(speech="%(speech)", Volume=100)
Else 
    Set speech = "%phrase(\"%expand(say_HullDamage)\")"
    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// ShieldState
// Events: ShieldState
//*************************************************************
PROGRAM ShieldState

If EventClass_ShieldsUp IsTrue
    Set speech = "%phrase(\"%expand(say_shieldsup)\")"
Else 
    Set speech = "%phrase(\"%expand(say_shieldsdown)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// CommitCrime
// Events: CommitCrime
//*************************************************************
PROGRAM CommitCrime

If EventClass_Bounty IsNotEmpty
    Set speech = %expand(say_CommitCrimeBounty)
Else 
    Set speech = %expand(say_CommitCrimeFine)

Set speech = "%phrase(\"%(speech)\")"
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// FSDResponse
// Events: FSDJump
//*************************************************************
PROGRAM FSDResponse

Event FROM %(EventJID) INFO
Set visit = %expand(say_FSDJumpVisit)
Set visit = "%wordof(visit, EC_VisitCount)"

Set speech = %expand(say_FSDJump)
If EventClass_FuelLevel <= 4
    Set speech += "%phrase(\"%expand(say_FSDJumpFuelWarning)\")"

If SpeechOptions NotPresent Or SpeechOptions NotContains FuelLevelDisable;
    Set speech += "%phrase(\"%expand(say_FSDJumpFuel)\")"

If (EventClass_Faction IsNotEmpty) And (SpeechOptions NotPresent Or SpeechOptions NotContains FSDFactionDisable;)
    Set speech += "%phrase(\"%expand(say_FSDJumpFaction)\")"

If SpeechOptions IsPresent And SpeechOptions Contains FirstJumpOnly; And EC_VisitCount >= 2
    Call speak(speech="%(speech)")
Else 
    Call speak(speech="%(speech)",FinishEvent=FSD)
    Global ScanSystem = %(EventStarSystem)

END PROGRAM

//*************************************************************
// Scan
// Events: Scan
//*************************************************************
PROGRAM Scan

Event FROM %(EventJID) INFO

If %(EventClass_IsStar) IsTrue
    Set speech = %expand(say_ScanStar)

    If SpeechOptions NotPresent Or SpeechOptions NotContains ScanStarMassDisable;
        Set speech += %expand(say_ScanStarMassMag)

        If EventClass_nOrbitalPeriod IsNotEmpty And EventClass_nOrbitalPeriod > 0
            Let period = %(EventClass_nOrbitalPeriod)/86400
            Set speech += %expand(say_ScanStarInOrbit)

    If SpeechOptions IsPresent And SpeechOptions Contains ScanHabZoneEnable;
        If EventClass_HabitableZoneInner IsNotEmpty And EventClass_HabitableZoneOuter IsNotEmpty And EventClass_HabitableZoneInner >= 5
            Set speech += %expand(say_ScanStarHabitableZone)
        If EventClass_nAge IsNotEmpty
            Set speech += %expand(say_ScanStarAge)

    Call speak(speech="%(speech)")
    End 

Else 
    Let gravity = %(EventClass_nSurfaceGravity)/9.8
    Let rotation = %(EventClass_nRotationPeriod)/86400
    Let period = %(EventClass_nOrbitalPeriod)/86400

    Set speech = %expand(say_ScanPlanet)

    If SpeechOptions NotPresent Or SpeechOptions NotContains ScanPlanetBasicInformationDisable;
        Set speech += %expand(say_ScanPlanetDistance)

        If %(EventClass_IsLandable) IsTrue
            Set speech += %expand(say_ScanPlanetLandable)

        If %(EventClass_Atmosphere) IsNotEmpty And %(EventClass_Atmosphere) $!= None
            Set speech += %expand(say_ScanPlanetAtmosphere)
        Else 
            Set speech += %expand(say_ScanPlanetNoAtmosphere)

    If SpeechOptions IsPresent And SpeechOptions Contains ScanPlanetExtendedInformationEnable;
        If %(EventClass_Volcanism) IsNotEmpty
            Set speech += %expand(say_ScanPlanetVolcanism)

        If %(EventClass_nTidalLock) $== 1
            Set speech += %expand(say_ScanPlanetTidallyLocked)
        Else 
            Set speech += %expand(say_ScanPlanetRotation)

        Set speech += %expand(say_ScanPlanetOrbitalPeriod)

        If %(EventClass_nMassEM) < 0.01
            Let moonmass = %(EventClass_nMassEM)/0.0123
            Set speech += %expand(say_ScanPlanetMoonMass)
        Else 
            Set speech += %expand(say_ScanPlanetMass)

        Set speech += %expand(say_ScanPlanetGravity)

        Set speech += %expand(say_ScanPlanetTemperature)

        If %(EventClass_nSurfacePressure) IsNotEmpty And %(EventClass_nSurfacePressure) > 0
            Let atpressure = %(EventClass_nSurfacePressure)/101.325
            Set speech += %expand(say_ScanPlanetPressure)
        Else 
            Set speech += %expand(say_ScanPlanetNoSurfacePressure)

    If SpeechOptions IsPresent And SpeechOptions Contains ScanPlanetMaterialInformationEnable;
        If %(EventClass_MaterialsCount) > 0
            Set speech += %expand(say_ScanPlanetMaterials)

    Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// SellExplorationData
// Events: SellExplorationData
//*************************************************************
PROGRAM SellExplorationData

Set speech = "%phrase(\"%expand(say_SellExplorationData)\")"

If EventClass_Discovered_Length >= 1
    Set speech += " %phrase(\"%expand(say_SellExplorationDataBonus)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Interdiction
// Events: Interdiction
//*************************************************************
PROGRAM Interdiction

If EventClass_Success IsTrue
    Set speech = "%phrase(\"%expand(say_InterdictionSuccess)\")"
Else 
    Set speech = "%phrase(\"%expand(say_InterdictionFailure)\")"

Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// MarketSell
// Events: MarketSell
//*************************************************************
PROGRAM MarketSell

Let profit = (%(EventClass_SellPrice)-%(EventClass_AvgPricePaid))*%(EventClass_Count)
Set speech = "%phrase(\"%expand(say_MarketSell)\")"
Call speak(speech="%(speech)")

END PROGRAM

//*************************************************************
// Friends
// Events: Friends
//*************************************************************
PROGRAM Friends

If (EventClass_Status $== Online Or EventClass_Status $== Offline) And (SpeechOptions IsPresent And SpeechOptions Contains FriendsStatusDisable;)
    Rem Print mute Friends $(EventClass_Status) of $(EventClass_Name)
Else 
    Call GenericResponse(EventClass_*=Pass)

END PROGRAM

//*************************************************************
// SaySystemInfo
// Events: onSayFinished?(EventName $== FSD), onTimer?(TimerName $== ScanDelay)
//*************************************************************
PROGRAM SaySystemInfo

// Print SaySysInfo %(ScanSystem) %(TriggerName)

If TriggerName $== onSayFinished                                // Trigger!
    Timer ScanDelay,"%eval(\"%random(10)*10+20\")"
    End 
ElseIf SpeechOptions NotPresent Or SpeechOptions NotContains EDSMInformationDisable;
    Scan EDSM  "%(ScanSystem)"

    Set speech = ""

    If S_Stars == 0
        Set speech += "%phrase(\"%expand(say_edsmscannoinfo)\")"
    ElseIf SpeechOptions IsPresent And SpeechOptions Contains EDSMSummaryEnable;
        Let totalstars = 0
        Let totalplanets = 0

        Loop %(S_Stars),N
            Set prefix = S_Star_%(N)_
            Set type = "%indirect(\"%(prefix)type\")"
            If type $!= barycentre
                Let totalstars = %(totalstars)+1

            Set planets = "%indirect(\"%(prefix)Planets\")"
            Let totalplanets = %(totalplanets)+%(planets)

        Set speech += "%phrase(\"%expand(say_edsmscanstarsplanets)\")"
    Else 
        Set excludestars = "%existsdefault(SpeechEDSMStarExclusion,\"\")"

        Loop %(S_Stars),S
            Set prefix = S_Star_%(S)_
            Set planets = "%indirect(\"%(prefix)Planets\")"
            Set data = "%indirect(\"%(prefix)data\")"
            Set type = "%indirect(\"%(prefix)type\")"
            Set ownname = "%indirect(\"%(prefix)assignedname\")"

            Let exclude = 0

            If type $== barycentre
                Set speech += %expand(say_edsmscanstarbarycentre)
            ElseIf data IsTrue
                Set name = "%indirect(\"%(prefix)bodyname\")"
                Set starclass = "%indirect(\"%(prefix)startype\")"
                Set startype = "%indirect(\"%(prefix)startypetext\")"
                Set mass = "%indirect(\"%(prefix)stellarmass\")"

                Rem we are going to look for A, ,A or just A

                If excludestars Contains %(starclass), Or excludestars Contains ,%(starclass) Or excludestars $== %(starclass)
                    Let exclude = 1
                Else 
                    Set speech += %expand(say_edsmscanstarinfo)
            Else 
                Set speech += %expand(say_edsmscanstarnoinfo)

            If exclude IsFalse
                Loop %(planets),P
                    Set prefix = S_Planet_%(S)_%(P)_
                    Call saySystemInfoBody(prefix="%(prefix)",S_*$=1)
                    Set speech += %(ReturnValue)

                    If SpeechOptions IsPresent And SpeechOptions Contains EDSMMoonsEnable;
                        Set moons = "%indirect(\"%(prefix)Moons\")"

                        Loop %(moons),M
                            Set prefix = S_Moon_%(S)_%(P)_%(M)_
                            Call saySystemInfoBody(prefix="%(prefix)",S_*$=1)
                            Set speech += %(ReturnValue)

                            If SpeechOptions IsPresent And SpeechOptions Contains EDSMSubMoonsEnable;
                                Set submoons = "%indirect(\"%(prefix)Submoons\")"

                                Loop %(submoons),SM
                                    Set prefix = S_SubMoon_%(S)_%(P)_%(M)_%(SM)_
                                    Call saySystemInfoBody(prefix="%(prefix)",S_*$=1)
                                    Set speech += %(ReturnValue)

    If speech IsNotEmpty                                        // Because we may have decided not to say anything!
        Set speech = "%replacevar(speech,\"say_tx\")"
        Say %(speech),Priority=Low,Literal=1

END PROGRAM

//*************************************************************
// saySystemInfoBody
//*************************************************************
PROGRAM saySystemInfoBody

Rem prefix in, plus all S_ variables

Set pdata = "%indirect(\"%(prefix)data\")"

If pdata IsTrue
    Set pname = "%indirect(\"%(prefix)bodyname\")"
    Set isstar = "%indirect(\"%(prefix)isstar\")"

    Rem print %(prefix) %(pname) star %(isstar)

    If isstar IsTrue
        Set stype = "%indirect(\"%(prefix)startypetext\")"
        Set mass = "%indirect(\"%(prefix)stellarmass\")"
        Return %expand(say_edsmscanbodystarinfo)

    Else 
        Set terraform = "%indirect(\"%(prefix)terraformstate\")"
        Set class = "%indirect(\"%(prefix)class\")"
        Set landable = "%indirect(\"%(prefix)landable\")"

        Set speech = %expand(say_edsmscanbodyinfo)

        If SpeechOptions IsPresent And SpeechOptions Contains EDSMAtmosphereEnable;
            Set atmos = "%indirect(\"%(prefix)atmosphere\")"
            Set speech += %expand(say_edsmscanbodyinfoAtmos)

        If SpeechOptions IsPresent And SpeechOptions Contains EDSMVolcanismEnable;
            Set volcanism = "%indirect(\"%(prefix)volcanism\")"
            Set speech += %expand(say_edsmscanbodyinfoVolcanism)

        If SpeechOptions IsPresent And SpeechOptions Contains EDSMMaterialsEnable;
            Set matcount = "%indirect(\"%(prefix)MaterialsCount\")"
            If matcount > 0
                Set speech += %expand(say_edsmscanbodyinfoMat)
                Set speech += "%ExpandVars(\"%(prefix)Materials_\",\", \",1,1000,\"nameonly splitcaps\")"

        Set speech += ". "
        Return %(speech)
Else 
    Set ownname = "%indirect(\"%(prefix)assignedname\")"
    Return %expand(say_edsmscanbodynoinfo)

END PROGRAM

//*************************************************************
// Menus
// Events: onMenuItem?(MenuName Contains VoiceMenu)
//*************************************************************
PROGRAM Menus

If MenuName Contains ConfigureVoice
    Perform ConfigureVoice "Configure Voice Synthesis"

If MenuName Contains ConfigureSpeechFile
    Perform EditSpeechText

If MenuName Contains ShowHelp
    MessageBox "Voice Pack (C) ED Discovery team\r\n\r\nUse Add-Ons | Manage to enable or disable this\r\nUse the speech and wave menu items in the Add-Ons menu to configure defaults","Voice Pack"

If MenuName Contains ConfigureVerbosity

    Set Def = ""
    Set dvar2a = "L2,Label,\"Speech file\",10,+50,80,20,\"\""
    Set dvar2b = "TBLF,TextBox,\"%existsdefault(SpeechLog,Def)\",100,+0,220,20,\"Empty means no speech file, else enter the file or use browse\""
    Set dvar2c = "BBROWSE,Button,Browse,350,+0,78,20,\"Select file to write speech output to\""
    Set dvar2d = "CBPR,CheckBox,\"Print date/time in log\",100,+30,140,20,\"Print time and date before text\",%IsPresent(SpeechOptions,\"LogTimeDate;\",0)"

    Set dvar2e = "CBLL,CheckBox,\"Log Last only\",250,+0,140,20,\"Clear log before each speech output\",%IsPresent(SpeechOptions,\"LogLastOnly;\",0)"
    Set dvar2f = "CBD,CheckBox,\"Disable Voice Output\",100,+30,200,20,\"Disable Voice Output, use to print only\",%IsPresent(SpeechOptions,\"PrintOnly;\",0)"

    Set dvar3a = "L3,Label,\"Exclude Stars\",10,+40,80,20,\"\""
    Set dvar3b = "TBSTAR,TextBox,\"%existsdefault(SpeechEDSMStarExclusion,Def)\",100,+0,220,20,\"Exclude these stars from the read out of system information read after jumping, star types OBAFGKM, H,N,TTS, Wx etc, comma or space separated\""

    Set dvar4a = "L3,Label,\"General\",10,+40,80,20,\"\""
    Set dvar4b = "CBFR,CheckBox,\"Disable Friend Status\",100,+0,200,20,\"Friend status online/offline is muted\",%IsPresent(SpeechOptions,\"FriendsStatusDisable;\",1)"
    Set dvar4c = "CBN,CheckBox,\"Disable NPC Chatter\",300,+0,200,20,\"Disable NPC Chatter\",%IsPresent(SpeechOptions,\"NPCChatterDisable;\",1)"

    Set dvar5a = "L3,Label,\"FSD Jump\",10,+40,80,20,\"\""
    Set dvar5b = "CBF,CheckBox,\"System Info on first jump only\",100,+0,200,20,\"Say system information on first jump to system only\",%IsPresent(SpeechOptions,\"FirstJumpOnly;\",0)"
    Set dvar5c = "CBFL,CheckBox,\"Disable fuel level reports\",300,+0,200,20,\"Disable Fuel Level Reports\",%IsPresent(SpeechOptions,\"FuelLevelDisable;\",0)"
    Set dvar5d = "CBFR,CheckBox,\"Disable faction reports\",-200,+30,200,20,\"Disable Faction reporting on FSD jumps\",%IsPresent(SpeechOptions,\"FSDFactionDisable;\",0)"

    Set dvar6a = "L3,Label,\"Scan\",10,+40,80,20,\"\""
    Set dvar6b = "CBSM,CheckBox,\"Disable Star Mass/Mag\",100,+0,200,20,\"Disable Scan reports of stars mass and mag\",%IsPresent(SpeechOptions,\"ScanStarMassDisable;\",0)"
    Set dvar6c = "CBSH,CheckBox,\"Enable Star HabZone\",300,+0,200,20,\"Enable Scan reports of stars hab zone\",%IsPresent(SpeechOptions,\"ScanHabZoneEnable;\",0)"
    Set dvar6d = "CBPB,CheckBox,\"Disable Planet Basic\",100,+30,200,20,\"Disable Scan reports of planets basic info\",%IsPresent(SpeechOptions,\"ScanPlanetBasicInformationDisable;\",0)"
    Set dvar6e = "CBPF,CheckBox,\"Enable Planet Extended\",300,+0,200,20,\"Enable Scan reports of planets extended info\",%IsPresent(SpeechOptions,\"ScanPlanetExtendedInformationEnable;\",0)"
    Set dvar6f = "CBPM,CheckBox,\"Enable Planet Materials\",100,+30,200,20,\"Enable Scan reports of planets materials info\",%IsPresent(SpeechOptions,\"ScanPlanetMaterialInformationEnable;\",0)"

    Set dvar7a = "L3,Label,\"EDSM\",10,+40,80,20,\"\""
    Set dvar7b = "CBED,CheckBox,\"Disable EDSM info\",100,+0,200,20,\"Disable all EDSM lookup of system info\",%IsPresent(SpeechOptions,\"EDSMInformationDisable;\",0)"
    Set dvar7c = "CBES,CheckBox,\"Short Summary\",300,+0,200,20,\"Produce a short summary instead of the full info\",%IsPresent(SpeechOptions,\";EDSMSummaryEnable\",0)"
    Set dvar7d = "CBEM,CheckBox,\"Moon information\",100,+30,200,20,\"Say moon information\",%IsPresent(SpeechOptions,\";EDSMMoonsEnable\",0)"
    Set dvar7e = "CBESM,CheckBox,\"Sub moon information\",300,+0,200,20,\"Say sub moon information\",%IsPresent(SpeechOptions,\";EDSMSubMoonsEnable\",0)"
    Set dvar7f = "CBEAT,CheckBox,\"Atmosphere information\",100,+30,200,20,\"Say atmosphere information for planets\",%IsPresent(SpeechOptions,\";EDSMAtmosphereEnable\",1)"
    Set dvar7g = "CBEVC,CheckBox,\"Volcanism information\",300,+0,200,20,\"Say volcanism information for planets\",%IsPresent(SpeechOptions,\";EDSMVolcanismEnable\",1)"
    Set dvar7h = "CBEMA,CheckBox,\"Materials information\",100,+30,200,20,\"Say materials information for planets\",%IsPresent(SpeechOptions,\";EDSMMaterialsEnable\",0)"

    Set dvarok = "OK,Button,\"OK\",350,+40,80,20,\"Press for OK\""
    Set dvarcancel = "Cancel,Button,\"Cancel\",250,+0,80,20,\"Press for Cancel\""

    Dialog D1, "Voice Pack Configuration", "460,560", dvar

    While D1 $!= Cancel And D1 $!= Escape
        If D1 $== BBROWSE
            FileDialog savefile,c:,"Log files|*.log|All Files|*.*",*.log,on
            If FileName IsNotEmpty
                DialogControl D1,Set TBLF=%(FileName)

        If D1 $== DRP1
            DialogControl D1,Get DRP1
            Print DRP pressed %(DialogResult)
            DialogControl D1, Set DRP1=One

        If D1 $== OK
            Let good = 1

            PersistentGlobal SpeechOptions = ""

            // in order
            Call SetSO(ctrl="CBPR",flag="LogTimeDate;")
            Call SetSO(ctrl="CBLL",flag="LogLastOnly;")
            Call SetSO(ctrl="CBD",flag="PrintOnly;")

            Call SetSO(ctrl="CBFR",flag="FriendsStatusDisable;")
            Call SetSO(ctrl="CBN",flag="NPCChatterDisable;")

            Call SetSO(ctrl="CBF",flag="FirstJumpOnly;")
            Call SetSO(ctrl="CBFL",flag="FuelLevelDisable;")
            Call SetSO(ctrl="CBFR",flag="FSDFactionDisable;")

            Call SetSO(ctrl="CBSM",flag="ScanStarMassDisable;")
            Call SetSO(ctrl="CBSH",flag="ScanHabZoneEnable;")
            Call SetSO(ctrl="CBPB",flag="ScanPlanetBasicInformationDisable;")
            Call SetSO(ctrl="CBPF",flag="ScanPlanetExtendedInformationEnable;")
            Call SetSO(ctrl="CBPM",flag="ScanPlanetMaterialInformationEnable;")

            Call SetSO(ctrl="CBED",flag="EDSMInformationDisable;")
            Call SetSO(ctrl="CBES",flag="EDSMSummaryEnable;")
            Call SetSO(ctrl="CBEM",flag="EDSMMoonsEnable;")
            Call SetSO(ctrl="CBESM",flag="EDSMSubMoonsEnable;")
            Call SetSO(ctrl="CBEAT",flag="EDSMAtmosphereEnable;")
            Call SetSO(ctrl="CBEVC",flag="EDSMVolcanismEnable;")
            Call SetSO(ctrl="CBEMA",flag="EDSMMaterialsEnable;")

            Print Set to %(SpeechOptions)

            DialogControl D1,Get TBSTAR
            PersistentGlobal SpeechEDSMStarExclusion = %(DialogResult)

            DialogControl D1,Get TBLF
            If DialogResult IsNotEmpty And good IsTrue
                If %fileexists(DialogResult) IsTrue
                    PersistentGlobal SpeechLog = %(DialogResult)
                Else 
                    Let success = "%openfile(h1,DialogResult,create)"
                    If success IsTrue
                        Print test write to %(DialogResult)
                        Expr %writeline(h1,"Speech output file")
                        Expr %closefile(h1)
                        PersistentGlobal SpeechLog = %(DialogResult)
                    Else 
                        MessageBox "Speech Log path not valid","Incorrect filename given"
                        Let good = 0
            Else 
                PersistentGlobal SpeechLog = ""

            If good IsTrue
                Break 

        DialogControl D1,Continue

    DialogControl D1, Close

END PROGRAM

//*************************************************************
// SetSO
//*************************************************************
PROGRAM SetSO

DialogControl D1,Get %(ctrl)
If DialogResult IsTrue
    PersistentGlobal SpeechOptions += %(flag)

END PROGRAM

//*************************************************************
// GenericResponse
// Events: ApproachSettlement, Bounty, BuyAmmo, BuyDrones, BuyExplorationData, BuyTradeData, CapShipBond, 
// Events: CockpitBreached(Volume=100), CollectCargo, CommunityGoalDiscard, CommunityGoalJoin, 
// Events: CommunityGoalReward, CrewAssign, CrewFire, CrewHire, DatalinkScan, DatalinkVoucher, DataScanned, 
// Events: Died, Docked, DockFighter, DockingCancelled, DockingRequested, DockingTimeout, DockSRV, EjectCargo, 
// Events: EngineerApply, EngineerCraft, EngineerProgress, EscapeInterdiction, FactionKillBond, 
// Events: FetchRemoteModule, FuelScoop(Priority=Low), HeatDamage, HeatWarning, Interdicted, JetConeBoost, 
// Events: JetConeDamage, LaunchFighter, LaunchSRV, Liftoff, MarketBuy, MassModuleStore, MaterialCollected, 
// Events: MaterialDiscarded, MaterialDiscovered, MiningRefined, MissionAbandoned, MissionAccepted, 
// Events: MissionCompleted, MissionFailed, ModuleBuy, ModuleRetrieve, ModuleSell, ModuleSellRemote, 
// Events: ModuleStore, ModuleSwap, PayFines, PayLegacyFines, PowerplayCollect, PowerplayDefect, 
// Events: PowerplayDeliver, PowerplayFastTrack, PowerplayJoin, PowerplayLeave, PowerplaySalary, 
// Events: PowerplayVote, PowerplayVoucher, Promotion, PVPKill, RebootRepair, RedeemVoucher, RefuelAll, 
// Events: RefuelPartial, Repair, RepairAll, RestockVehicle, Resurrect, ScientificResearch, Screenshot, 
// Events: SelfDestruct, SellDrones, SendText, ShipyardBuy, ShipyardNew, ShipyardSell, ShipyardSwap, 
// Events: ShipyardTransfer, SupercruiseEntry, SupercruiseExit, Synthesis, Touchdown, Undocked, USSDrop, 
// Events: VehicleSwitch, WingAdd, WingJoin, WingLeave, WingInvite, 
// Events: onTimer?(TimerName Contains VoicePackGenericDelay), Scanned, StartJump, SetUserShipName, 
// Events: CrewMemberJoins, CrewMemberQuits, JoinACrew, KickCrewMember, ChangeCrewRole, QuitACrew
//*************************************************************
PROGRAM GenericResponse

Set v = say_%(EventClass_EventTypeStr)                          // make up variable name from event name
Set prior = "%existsdefault(Priority,\"Normal\")"               // pick up config variables
Set speech = "%phrase(\"%indirect(v)\")"                        // now expand any phrases in it

If HighVolume NotPresent
    Set HighVolume = 0

Call speak(speech="%(speech)",HighVolume="%(HighVolume)",Priority="%(prior)")

END PROGRAM

//*************************************************************
// GenericDelayedResponse
// Events: DockingDenied(Delay=10000), DockingGranted(Delay=10000)
//*************************************************************
PROGRAM GenericDelayedResponse

Timer VoicePackGenericDelay%(EventClass_EventTypeStr),%(Delay),%(EventJID)

END PROGRAM

//*************************************************************
// speak
//*************************************************************
PROGRAM speak

Rem speech always, optional: Volume, Priority, FinishEvent, Wait

Set speech = "%replacevar(speech,\"say_tx\")"

Set ds = 0
If SpeechOptions IsPresent And SpeechOptions Contains PrintOnly;
    Set ds = 1

// Print SAY: %(speech)
Say %(speech), Literal=1, Volume="%existsdefault(Volume,\"-999\")", Priority="%existsdefault(Priority,\"Normal\")", DontSpeak="%(ds)", FinishEvent="%existsdefault(FinishEvent,\"\")" , Wait="%existsdefault(Wait,\"0\")"

If SpeechLog IsPresent And SpeechLog IsNotEmpty
    If SpeechOptions IsPresent And SpeechOptions Contains LogLastOnly;
        Let success = "%openfile(h1,SpeechLog,create)"
    Else 
        Let success = "%openfile(h1,SpeechLog,append)"

    If success IsTrue
        If SpeechOptions IsPresent And SpeechOptions Contains LogTimeDate;
            Expr %write(h1,"%datetimenow(local):")

        Expr %writeline(h1,speech)
        Expr %closefile(h1)
    Else 
        Print Cannot write to speech log file '%(SpeechLog)'

END PROGRAM

